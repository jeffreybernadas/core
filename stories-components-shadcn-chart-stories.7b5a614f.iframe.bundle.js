"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[6334],{"./src/lib/utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{cn:()=>cn});var clsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),tailwind_merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tailwind-merge/dist/bundle-mjs.mjs");const cn=(...inputs)=>(0,tailwind_merge__WEBPACK_IMPORTED_MODULE_0__.QP)((0,clsx__WEBPACK_IMPORTED_MODULE_1__.$)(inputs))},"./src/stories/components/shadcn/chart.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AreaChartExample:()=>AreaChartExample,BarChartExample:()=>BarChartExample,CombinationChartExample:()=>CombinationChartExample,LineChartExample:()=>LineChartExample,MultiLineChartExample:()=>MultiLineChartExample,ScatterChartExample:()=>ScatterChartExample,__namedExportsOrder:()=>__namedExportsOrder,default:()=>chart_stories});var react=__webpack_require__("./node_modules/react/index.js"),ResponsiveContainer=__webpack_require__("./node_modules/recharts/es6/component/ResponsiveContainer.js"),Tooltip=__webpack_require__("./node_modules/recharts/es6/component/Tooltip.js"),Legend=__webpack_require__("./node_modules/recharts/es6/component/Legend.js"),utils=__webpack_require__("./src/lib/utils.ts");const THEMES={light:"",dark:".dark"},ChartContext=react.createContext(null);function ChartContainer({id,className,children,config,...props}){const uniqueId=react.useId(),chartId=`chart-${id||uniqueId.replace(/:/g,"")}`;return react.createElement(ChartContext.Provider,{value:{config}},react.createElement("div",{"data-slot":"chart","data-chart":chartId,className:(0,utils.cn)("[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",className),...props},react.createElement(ChartStyle,{id:chartId,config}),react.createElement(ResponsiveContainer.u,null,children)))}const ChartStyle=({id,config})=>{const colorConfig=Object.entries(config).filter((([,config])=>config.theme||config.color));return colorConfig.length?react.createElement("style",{dangerouslySetInnerHTML:{__html:Object.entries(THEMES).map((([theme,prefix])=>`\n${prefix} [data-chart=${id}] {\n${colorConfig.map((([key,itemConfig])=>{const color=itemConfig.theme?.[theme]||itemConfig.color;return color?`  --color-${key}: ${color};`:null})).join("\n")}\n}\n`)).join("\n")}}):null},ChartTooltip=Tooltip.m;const ChartLegend=Legend.s;ChartContainer.__docgenInfo={description:"",methods:[],displayName:"ChartContainer",props:{config:{required:!0,tsType:{name:"signature",type:"object",raw:"{\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n}",signature:{properties:[{key:{name:"string",required:!0},value:{name:"intersection",raw:"{\n  label?: React.ReactNode;\n  icon?: React.ComponentType;\n} & (\n  | { color?: string; theme?: never }\n  | { color?: never; theme: Record<keyof typeof THEMES, string> }\n)",elements:[{name:"signature",type:"object",raw:"{\n  label?: React.ReactNode;\n  icon?: React.ComponentType;\n}",signature:{properties:[{key:"label",value:{name:"ReactReactNode",raw:"React.ReactNode",required:!1}},{key:"icon",value:{name:"ReactComponentType",raw:"React.ComponentType",required:!1}}]}},{name:"unknown"}]}}]}},description:""},children:{required:!0,tsType:{name:'ReactComponentProps["children"]',raw:'React.ComponentProps<\n  typeof RechartsPrimitive.ResponsiveContainer\n>["children"]'},description:""}}},ChartStyle.__docgenInfo={description:"",methods:[],displayName:"ChartStyle",props:{id:{required:!0,tsType:{name:"string"},description:""},config:{required:!0,tsType:{name:"signature",type:"object",raw:"{\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n}",signature:{properties:[{key:{name:"string",required:!0},value:{name:"intersection",raw:"{\n  label?: React.ReactNode;\n  icon?: React.ComponentType;\n} & (\n  | { color?: string; theme?: never }\n  | { color?: never; theme: Record<keyof typeof THEMES, string> }\n)",elements:[{name:"signature",type:"object",raw:"{\n  label?: React.ReactNode;\n  icon?: React.ComponentType;\n}",signature:{properties:[{key:"label",value:{name:"ReactReactNode",raw:"React.ReactNode",required:!1}},{key:"icon",value:{name:"ReactComponentType",raw:"React.ComponentType",required:!1}}]}},{name:"unknown"}]}}]}},description:""}}};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx"),LineChart=__webpack_require__("./node_modules/recharts/es6/chart/LineChart.js"),CartesianGrid=__webpack_require__("./node_modules/recharts/es6/cartesian/CartesianGrid.js"),XAxis=__webpack_require__("./node_modules/recharts/es6/cartesian/XAxis.js"),YAxis=__webpack_require__("./node_modules/recharts/es6/cartesian/YAxis.js"),Line=__webpack_require__("./node_modules/recharts/es6/cartesian/Line.js"),AreaChart=__webpack_require__("./node_modules/recharts/es6/chart/AreaChart.js"),Area=__webpack_require__("./node_modules/recharts/es6/cartesian/Area.js"),BarChart=__webpack_require__("./node_modules/recharts/es6/chart/BarChart.js"),Bar=__webpack_require__("./node_modules/recharts/es6/cartesian/Bar.js"),ScatterChart=__webpack_require__("./node_modules/recharts/es6/chart/ScatterChart.js"),Scatter=__webpack_require__("./node_modules/recharts/es6/cartesian/Scatter.js"),ComposedChart=__webpack_require__("./node_modules/recharts/es6/chart/ComposedChart.js");const chart_stories={title:"Components/Shadcn/Chart",component:ChartContainer,parameters:{layout:"centered",docs:{description:{component:"Beautiful charts. Built using Recharts.\n\nIntroducing Charts. A collection of chart components that you can copy and paste into your apps.\n\nCharts are designed to look great out of the box. They work well with the other components and are fully customizable to fit your project.\n\nBrowse the [Charts library](https://ui.shadcn.com/charts).\nSee the [Shadcn docs](https://ui.shadcn.com/docs/components/chart) for more information."}}},tags:["autodocs","stable","version:2.3.0"],argTypes:{className:{control:"text",description:"Additional CSS classes to apply"},config:{control:"object",description:"The configuration for the chart. _See Recharts docs for more information._",table:{type:{summary:"ChartConfig"}}},children:{control:"object",description:"The content to display inside the chart",table:{type:{summary:"React.ReactNode"}}}},decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement("div",{className:"w-full max-w-4xl"},react.createElement(Story,null)))]},LineChartExample={args:{className:"h-80",config:{sales:{label:"Sales",color:"rgb(75, 192, 192)"}},children:react.createElement(LineChart.b,{data:[{month:"Jan",sales:65},{month:"Feb",sales:59},{month:"Mar",sales:80},{month:"Apr",sales:81},{month:"May",sales:56},{month:"Jun",sales:55},{month:"Jul",sales:40},{month:"Aug",sales:59},{month:"Sep",sales:76},{month:"Oct",sales:85},{month:"Nov",sales:71},{month:"Dec",sales:90}]},react.createElement(CartesianGrid.d,{strokeDasharray:"3 3"}),react.createElement(XAxis.W,{dataKey:"month"}),react.createElement(YAxis.h,null),react.createElement(ChartTooltip,null),react.createElement(Line.N,{type:"monotone",dataKey:"sales",stroke:"var(--color-sales)"}))}},MultiLineChartExample={args:{className:"h-80",config:{sales:{label:"Sales",color:"rgb(75, 192, 192)"},revenue:{label:"Revenue",color:"rgb(153, 102, 255)"},profit:{label:"Profit",color:"rgb(255, 99, 132)"}},children:react.createElement(LineChart.b,{data:[{month:"Jan",sales:65,revenue:28,profit:17},{month:"Feb",sales:59,revenue:48,profit:40},{month:"Mar",sales:80,revenue:40,profit:30},{month:"Apr",sales:81,revenue:19,profit:10},{month:"May",sales:56,revenue:86,profit:66},{month:"Jun",sales:55,revenue:27,profit:20}]},react.createElement(CartesianGrid.d,{strokeDasharray:"3 3"}),react.createElement(XAxis.W,{dataKey:"month"}),react.createElement(YAxis.h,null),react.createElement(ChartTooltip,null),react.createElement(ChartLegend,null),react.createElement(Line.N,{type:"monotone",dataKey:"sales",stroke:"var(--color-sales)"}),react.createElement(Line.N,{type:"monotone",dataKey:"revenue",stroke:"var(--color-revenue)"}),react.createElement(Line.N,{type:"monotone",dataKey:"profit",stroke:"var(--color-profit)"}))}},AreaChartExample={args:{className:"h-80",config:{sales:{label:"Sales",color:"rgb(75, 192, 192)"}},children:react.createElement(AreaChart.Q,{data:[{month:"Jan",sales:65},{month:"Feb",sales:59},{month:"Mar",sales:80},{month:"Apr",sales:81},{month:"May",sales:56},{month:"Jun",sales:55}]},react.createElement(CartesianGrid.d,{strokeDasharray:"3 3"}),react.createElement(XAxis.W,{dataKey:"month"}),react.createElement(YAxis.h,null),react.createElement(ChartTooltip,null),react.createElement(Area.G,{type:"monotone",dataKey:"sales",stroke:"var(--color-sales)",fill:"var(--color-sales)",fillOpacity:.2}))}},BarChartExample={args:{className:"h-80",config:{values:{label:"Values",color:"rgb(75, 192, 192)"}},children:react.createElement(BarChart.E,{data:[{category:"Category 1",values:65},{category:"Category 2",values:59},{category:"Category 3",values:80},{category:"Category 4",values:81},{category:"Category 5",values:56}]},react.createElement(CartesianGrid.d,{strokeDasharray:"3 3"}),react.createElement(XAxis.W,{dataKey:"category"}),react.createElement(YAxis.h,null),react.createElement(ChartTooltip,null),react.createElement(Bar.y,{dataKey:"values",fill:"var(--color-values)"}))}},ScatterChartExample={args:{className:"h-80",config:{scatter:{label:"Data Points",color:"rgb(255, 99, 132)"}},children:react.createElement(ScatterChart.t,{data:[{x:-10,y:0},{x:0,y:10},{x:10,y:5},{x:.5,y:5.5},{x:-5,y:-5},{x:7,y:-10}]},react.createElement(CartesianGrid.d,{strokeDasharray:"3 3"}),react.createElement(XAxis.W,{type:"number",dataKey:"x"}),react.createElement(YAxis.h,{type:"number",dataKey:"y"}),react.createElement(ChartTooltip,null),react.createElement(Scatter.X,{dataKey:"y",fill:"var(--color-scatter)"}))}},CombinationChartExample={args:{className:"h-80",config:{sales:{label:"Sales",color:"rgb(75, 192, 192)"},revenue:{label:"Revenue",color:"rgb(255, 99, 132)"}},children:react.createElement(ComposedChart.X,{data:[{month:"Jan",sales:65,revenue:28},{month:"Feb",sales:59,revenue:48},{month:"Mar",sales:80,revenue:40},{month:"Apr",sales:81,revenue:19},{month:"May",sales:56,revenue:86},{month:"Jun",sales:55,revenue:27}]},react.createElement(CartesianGrid.d,{strokeDasharray:"3 3"}),react.createElement(XAxis.W,{dataKey:"month"}),react.createElement(YAxis.h,null),react.createElement(ChartTooltip,null),react.createElement(ChartLegend,null),react.createElement(Bar.y,{dataKey:"sales",fill:"var(--color-sales)"}),react.createElement(Line.N,{type:"monotone",dataKey:"revenue",stroke:"var(--color-revenue)"}))}},__namedExportsOrder=["LineChartExample","MultiLineChartExample","AreaChartExample","BarChartExample","ScatterChartExample","CombinationChartExample"];LineChartExample.parameters={...LineChartExample.parameters,docs:{...LineChartExample.parameters?.docs,source:{originalSource:'{\n  args: {\n    className: "h-80",\n    config: {\n      sales: {\n        label: "Sales",\n        color: "rgb(75, 192, 192)"\n      }\n    },\n    children: <LineChart data={[{\n      month: "Jan",\n      sales: 65\n    }, {\n      month: "Feb",\n      sales: 59\n    }, {\n      month: "Mar",\n      sales: 80\n    }, {\n      month: "Apr",\n      sales: 81\n    }, {\n      month: "May",\n      sales: 56\n    }, {\n      month: "Jun",\n      sales: 55\n    }, {\n      month: "Jul",\n      sales: 40\n    }, {\n      month: "Aug",\n      sales: 59\n    }, {\n      month: "Sep",\n      sales: 76\n    }, {\n      month: "Oct",\n      sales: 85\n    }, {\n      month: "Nov",\n      sales: 71\n    }, {\n      month: "Dec",\n      sales: 90\n    }]}>\n        <CartesianGrid strokeDasharray="3 3" />\n        <XAxis dataKey="month" />\n        <YAxis />\n        <ChartTooltip />\n        <Line type="monotone" dataKey="sales" stroke="var(--color-sales)" />\n      </LineChart>\n  }\n}',...LineChartExample.parameters?.docs?.source},description:{story:"Basic line chart with a single dataset.",...LineChartExample.parameters?.docs?.description}}},MultiLineChartExample.parameters={...MultiLineChartExample.parameters,docs:{...MultiLineChartExample.parameters?.docs,source:{originalSource:'{\n  args: {\n    className: "h-80",\n    config: {\n      sales: {\n        label: "Sales",\n        color: "rgb(75, 192, 192)"\n      },\n      revenue: {\n        label: "Revenue",\n        color: "rgb(153, 102, 255)"\n      },\n      profit: {\n        label: "Profit",\n        color: "rgb(255, 99, 132)"\n      }\n    },\n    children: <LineChart data={[{\n      month: "Jan",\n      sales: 65,\n      revenue: 28,\n      profit: 17\n    }, {\n      month: "Feb",\n      sales: 59,\n      revenue: 48,\n      profit: 40\n    }, {\n      month: "Mar",\n      sales: 80,\n      revenue: 40,\n      profit: 30\n    }, {\n      month: "Apr",\n      sales: 81,\n      revenue: 19,\n      profit: 10\n    }, {\n      month: "May",\n      sales: 56,\n      revenue: 86,\n      profit: 66\n    }, {\n      month: "Jun",\n      sales: 55,\n      revenue: 27,\n      profit: 20\n    }]}>\n        <CartesianGrid strokeDasharray="3 3" />\n        <XAxis dataKey="month" />\n        <YAxis />\n        <ChartTooltip />\n        <ChartLegend />\n        <Line type="monotone" dataKey="sales" stroke="var(--color-sales)" />\n        <Line type="monotone" dataKey="revenue" stroke="var(--color-revenue)" />\n        <Line type="monotone" dataKey="profit" stroke="var(--color-profit)" />\n      </LineChart>\n  }\n}',...MultiLineChartExample.parameters?.docs?.source},description:{story:"Multi-line chart with multiple datasets.",...MultiLineChartExample.parameters?.docs?.description}}},AreaChartExample.parameters={...AreaChartExample.parameters,docs:{...AreaChartExample.parameters?.docs,source:{originalSource:'{\n  args: {\n    className: "h-80",\n    config: {\n      sales: {\n        label: "Sales",\n        color: "rgb(75, 192, 192)"\n      }\n    },\n    children: <AreaChart data={[{\n      month: "Jan",\n      sales: 65\n    }, {\n      month: "Feb",\n      sales: 59\n    }, {\n      month: "Mar",\n      sales: 80\n    }, {\n      month: "Apr",\n      sales: 81\n    }, {\n      month: "May",\n      sales: 56\n    }, {\n      month: "Jun",\n      sales: 55\n    }]}>\n        <CartesianGrid strokeDasharray="3 3" />\n        <XAxis dataKey="month" />\n        <YAxis />\n        <ChartTooltip />\n        <Area type="monotone" dataKey="sales" stroke="var(--color-sales)" fill="var(--color-sales)" fillOpacity={0.2} />\n      </AreaChart>\n  }\n}',...AreaChartExample.parameters?.docs?.source},description:{story:"Area chart with filled areas.",...AreaChartExample.parameters?.docs?.description}}},BarChartExample.parameters={...BarChartExample.parameters,docs:{...BarChartExample.parameters?.docs,source:{originalSource:'{\n  args: {\n    className: "h-80",\n    config: {\n      values: {\n        label: "Values",\n        color: "rgb(75, 192, 192)"\n      }\n    },\n    children: <BarChart data={[{\n      category: "Category 1",\n      values: 65\n    }, {\n      category: "Category 2",\n      values: 59\n    }, {\n      category: "Category 3",\n      values: 80\n    }, {\n      category: "Category 4",\n      values: 81\n    }, {\n      category: "Category 5",\n      values: 56\n    }]}>\n        <CartesianGrid strokeDasharray="3 3" />\n        <XAxis dataKey="category" />\n        <YAxis />\n        <ChartTooltip />\n        <Bar dataKey="values" fill="var(--color-values)" />\n      </BarChart>\n  }\n}',...BarChartExample.parameters?.docs?.source},description:{story:"Bar chart with vertical bars.",...BarChartExample.parameters?.docs?.description}}},ScatterChartExample.parameters={...ScatterChartExample.parameters,docs:{...ScatterChartExample.parameters?.docs,source:{originalSource:'{\n  args: {\n    className: "h-80",\n    config: {\n      scatter: {\n        label: "Data Points",\n        color: "rgb(255, 99, 132)"\n      }\n    },\n    children: <ScatterChart data={[{\n      x: -10,\n      y: 0\n    }, {\n      x: 0,\n      y: 10\n    }, {\n      x: 10,\n      y: 5\n    }, {\n      x: 0.5,\n      y: 5.5\n    }, {\n      x: -5,\n      y: -5\n    }, {\n      x: 7,\n      y: -10\n    }]}>\n        <CartesianGrid strokeDasharray="3 3" />\n        <XAxis type="number" dataKey="x" />\n        <YAxis type="number" dataKey="y" />\n        <ChartTooltip />\n        <Scatter dataKey="y" fill="var(--color-scatter)" />\n      </ScatterChart>\n  }\n}',...ScatterChartExample.parameters?.docs?.source},description:{story:"Scatter chart.",...ScatterChartExample.parameters?.docs?.description}}},CombinationChartExample.parameters={...CombinationChartExample.parameters,docs:{...CombinationChartExample.parameters?.docs,source:{originalSource:'{\n  args: {\n    className: "h-80",\n    config: {\n      sales: {\n        label: "Sales",\n        color: "rgb(75, 192, 192)"\n      },\n      revenue: {\n        label: "Revenue",\n        color: "rgb(255, 99, 132)"\n      }\n    },\n    children: <ComposedChart data={[{\n      month: "Jan",\n      sales: 65,\n      revenue: 28\n    }, {\n      month: "Feb",\n      sales: 59,\n      revenue: 48\n    }, {\n      month: "Mar",\n      sales: 80,\n      revenue: 40\n    }, {\n      month: "Apr",\n      sales: 81,\n      revenue: 19\n    }, {\n      month: "May",\n      sales: 56,\n      revenue: 86\n    }, {\n      month: "Jun",\n      sales: 55,\n      revenue: 27\n    }]}>\n        <CartesianGrid strokeDasharray="3 3" />\n        <XAxis dataKey="month" />\n        <YAxis />\n        <ChartTooltip />\n        <ChartLegend />\n        <Bar dataKey="sales" fill="var(--color-sales)" />\n        <Line type="monotone" dataKey="revenue" stroke="var(--color-revenue)" />\n      </ComposedChart>\n  }\n}',...CombinationChartExample.parameters?.docs?.source},description:{story:"Combination chart with both line and bar.",...CombinationChartExample.parameters?.docs?.description}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);