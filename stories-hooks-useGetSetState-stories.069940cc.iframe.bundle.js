"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[6106],{"./src/hooks/useUpdate.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>useUpdate});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const updateReducer=num=>(num+1)%1e6;function useUpdate(){const[,update]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(updateReducer,0);return update}},"./src/stories/hooks/useGetSetState.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useGetSetState_stories});var react=__webpack_require__("./node_modules/react/index.js"),useUpdate=__webpack_require__("./src/hooks/useUpdate.ts");const hooks_useGetSetState=(initialState={})=>{const update=(0,useUpdate.A)(),state=(0,react.useRef)({...initialState});return[(0,react.useCallback)((()=>state.current),[]),(0,react.useCallback)((patch=>{patch&&(Object.assign(state.current,patch),update())}),[])]};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useGetSetState_stories={title:"Hooks/State Management/useGetSetState",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useGetSetState` is a hook that provides get and set functions for managing object state.\nSimilar to useGetSet but specifically designed for object states with partial updates.\n\n### Module Federation Import\n```tsx\nimport { useGetSetState } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useGetSetState } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const [getState, setState] = useGetSetState({\n    name: "John",\n    age: 25,\n  });\n\n  const updateAge = () => {\n    setState({ age: getState().age + 1 });\n  };\n\n  return (\n    <div>\n      <p>Name: {getState().name}</p>\n      <p>Age: {getState().age}</p>\n      <button onClick={updateAge}>Increment Age</button>\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseGetSetState<T extends object>(\n  initialState: T = {} as T // Initial object state\n): [\n  () => T, // Function to get current state\n  (patch: Partial<T>) => void // Function to merge patch with current state\n]\n```\n\n### Returns\n```tsx\n[\n  get: () => T, // Function to get current state\n  set: (patch: Partial<T>) => void // Function to merge patch with current state\n]\n```'}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},Example={render:()=>{const[getProfile,setProfile]=hooks_useGetSetState({name:"John Doe",age:25,email:"john@example.com",preferences:{theme:"light",notifications:!0},lastUpdated:new Date}),updateAge=(0,react.useCallback)((()=>{setProfile({age:getProfile().age+1})}),[]),updateNameAndEmail=(0,react.useCallback)((()=>{setProfile({name:"Jane Doe",email:"jane@example.com",lastUpdated:new Date})}),[]),toggleTheme=(0,react.useCallback)((()=>{const currentTheme=getProfile().preferences.theme;setProfile({preferences:{...getProfile().preferences,theme:"light"===currentTheme?"dark":"light"},lastUpdated:new Date})}),[]),toggleNotifications=(0,react.useCallback)((()=>{const currentPreferences=getProfile().preferences;setProfile({preferences:{...currentPreferences,notifications:!currentPreferences.notifications},lastUpdated:new Date})}),[]);return react.createElement("div",{className:"w-[400px]"},react.createElement("div",{className:"bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6"},react.createElement("div",{className:"space-y-2"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Basic Information"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-700 p-4 rounded space-y-2"},react.createElement("div",null,react.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Name:"),react.createElement("p",{className:"text-lg font-mono text-slate-700 dark:text-slate-300"},getProfile().name)),react.createElement("div",null,react.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Age:"),react.createElement("p",{className:"text-lg font-mono text-slate-700 dark:text-slate-300"},getProfile().age)),react.createElement("div",null,react.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Email:"),react.createElement("p",{className:"text-lg font-mono text-slate-700 dark:text-slate-300"},getProfile().email)),react.createElement("div",{className:"space-x-2 mt-3"},react.createElement("button",{onClick:updateAge,className:"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"},"Increment Age"),react.createElement("button",{onClick:updateNameAndEmail,className:"px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm"},"Update Name & Email")))),react.createElement("div",{className:"space-y-2"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Preferences"),react.createElement("div",{className:"bg-purple-100 dark:bg-purple-900/20 p-4 rounded space-y-3"},react.createElement("div",null,react.createElement("p",{className:"text-sm text-purple-600 dark:text-purple-400"},"Theme:"),react.createElement("p",{className:"text-lg font-mono text-purple-700 dark:text-purple-300"},getProfile().preferences.theme)),react.createElement("div",null,react.createElement("p",{className:"text-sm text-purple-600 dark:text-purple-400"},"Notifications:"),react.createElement("p",{className:"text-lg font-mono text-purple-700 dark:text-purple-300"},getProfile().preferences.notifications?"Enabled":"Disabled")),react.createElement("div",{className:"space-x-2"},react.createElement("button",{onClick:toggleTheme,className:"px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 text-sm"},"Toggle Theme"),react.createElement("button",{onClick:toggleNotifications,className:"px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 text-sm"},"Toggle Notifications")))),react.createElement("div",{className:"space-y-2"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Last Updated"),react.createElement("div",{className:"bg-orange-100 dark:bg-orange-900/20 p-4 rounded"},react.createElement("p",{className:"text-sm text-orange-600 dark:text-orange-400"},"Timestamp:"),react.createElement("p",{className:"text-lg font-mono text-orange-700 dark:text-orange-300"},getProfile().lastUpdated.toLocaleString()))),react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},"Try the different buttons! Notice how each update only modifies the specified fields while preserving others. The lastUpdated timestamp updates automatically with each change! ðŸ”„"))))}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // Initialize with a complex object state\n    const [getProfile, setProfile] = useGetSetState<UserProfile>({\n      name: "John Doe",\n      age: 25,\n      email: "john@example.com",\n      preferences: {\n        theme: "light",\n        notifications: true\n      },\n      lastUpdated: new Date()\n    });\n\n    // Example 1: Update a single field\n    const updateAge = useCallback(() => {\n      setProfile({\n        age: getProfile().age + 1\n      });\n    }, []);\n\n    // Example 2: Update multiple fields\n    const updateNameAndEmail = useCallback(() => {\n      setProfile({\n        name: "Jane Doe",\n        email: "jane@example.com",\n        lastUpdated: new Date()\n      });\n    }, []);\n\n    // Example 3: Update nested object\n    const toggleTheme = useCallback(() => {\n      const currentTheme = getProfile().preferences.theme;\n      setProfile({\n        preferences: {\n          ...getProfile().preferences,\n          theme: currentTheme === "light" ? "dark" : "light"\n        },\n        lastUpdated: new Date()\n      });\n    }, []);\n\n    // Example 4: Toggle notifications\n    const toggleNotifications = useCallback(() => {\n      const currentPreferences = getProfile().preferences;\n      setProfile({\n        preferences: {\n          ...currentPreferences,\n          notifications: !currentPreferences.notifications\n        },\n        lastUpdated: new Date()\n      });\n    }, []);\n    return <div className="w-[400px]">\n        <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6">\n          {/* Basic Info */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Basic Information\n            </h3>\n            <div className="bg-slate-100 dark:bg-slate-700 p-4 rounded space-y-2">\n              <div>\n                <p className="text-sm text-slate-500 dark:text-slate-400">\n                  Name:\n                </p>\n                <p className="text-lg font-mono text-slate-700 dark:text-slate-300">\n                  {getProfile().name}\n                </p>\n              </div>\n              <div>\n                <p className="text-sm text-slate-500 dark:text-slate-400">\n                  Age:\n                </p>\n                <p className="text-lg font-mono text-slate-700 dark:text-slate-300">\n                  {getProfile().age}\n                </p>\n              </div>\n              <div>\n                <p className="text-sm text-slate-500 dark:text-slate-400">\n                  Email:\n                </p>\n                <p className="text-lg font-mono text-slate-700 dark:text-slate-300">\n                  {getProfile().email}\n                </p>\n              </div>\n              <div className="space-x-2 mt-3">\n                <button onClick={updateAge} className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm">\n                  Increment Age\n                </button>\n                <button onClick={updateNameAndEmail} className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm">\n                  Update Name & Email\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Preferences */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Preferences\n            </h3>\n            <div className="bg-purple-100 dark:bg-purple-900/20 p-4 rounded space-y-3">\n              <div>\n                <p className="text-sm text-purple-600 dark:text-purple-400">\n                  Theme:\n                </p>\n                <p className="text-lg font-mono text-purple-700 dark:text-purple-300">\n                  {getProfile().preferences.theme}\n                </p>\n              </div>\n              <div>\n                <p className="text-sm text-purple-600 dark:text-purple-400">\n                  Notifications:\n                </p>\n                <p className="text-lg font-mono text-purple-700 dark:text-purple-300">\n                  {getProfile().preferences.notifications ? "Enabled" : "Disabled"}\n                </p>\n              </div>\n              <div className="space-x-2">\n                <button onClick={toggleTheme} className="px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 text-sm">\n                  Toggle Theme\n                </button>\n                <button onClick={toggleNotifications} className="px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 text-sm">\n                  Toggle Notifications\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Last Updated */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Last Updated\n            </h3>\n            <div className="bg-orange-100 dark:bg-orange-900/20 p-4 rounded">\n              <p className="text-sm text-orange-600 dark:text-orange-400">\n                Timestamp:\n              </p>\n              <p className="text-lg font-mono text-orange-700 dark:text-orange-300">\n                {getProfile().lastUpdated.toLocaleString()}\n              </p>\n            </div>\n          </div>\n\n          {/* Instructions */}\n          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n            <p className="text-sm text-blue-600 dark:text-blue-400">\n              Try the different buttons! Notice how each update only modifies\n              the specified fields while preserving others. The lastUpdated\n              timestamp updates automatically with each change! ðŸ”„\n            </p>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);