"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[2222],{"./src/hooks/useEffectOnce.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const __WEBPACK_DEFAULT_EXPORT__=effect=>{(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(effect,[])}},"./src/stories/hooks/useMount.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useMount_stories});var react=__webpack_require__("./node_modules/react/index.js"),useEffectOnce=__webpack_require__("./src/hooks/useEffectOnce.ts");const hooks_useMount=fn=>{(0,useEffectOnce.A)((()=>{fn()}))};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useMount_stories={title:"Hooks/Lifecycle/useMount",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:"`useMount` is a hook that executes a callback function only when a component mounts.\nIt's a simplified version of useEffect that only runs once on mount, similar to componentDidMount in class components.\n\n### Module Federation Import\n```tsx\nimport { useMount } from \"@core/hooks\";\n```\n\n### NPM Package Import\n```tsx\nimport { useMount } from \"@bernz322/core/hooks\";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  useMount(() => {\n    console.log('Component mounted!');\n  });\n\n  return <div>Check console for mount log</div>;\n};\n```\n\n### Parameters\n```tsx\nuseMount(\n  fn: () => void  // Function to execute on mount\n): void\n```\n\n### Returns\n```tsx\nvoid // This hook doesn't return anything\n```\n\n### Browser Compatibility\nUses standard React useEffect hook internally.\nSupported in all modern browsers.\n\n### Related Resources\n- [React useEffect Hook](https://react.dev/reference/react/useEffect)\n- [React Component Lifecycle](https://react.dev/learn/lifecycle-of-reactive-effects)"}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},MountChild=()=>(hooks_useMount((()=>{console.log("ðŸŸ¢ Component mounted");const notification=document.createElement("div");notification.className="fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg",notification.textContent="Component Mounted!",document.body.appendChild(notification),setTimeout((()=>notification.remove()),2e3)})),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-800 p-4 rounded-lg"},react.createElement("p",{className:"text-slate-900 dark:text-slate-100"},"I'm mounted! Check the console and notification."))),MountExample=()=>{const[mountCount,setMountCount]=react.useState(0),[showChild,setShowChild]=react.useState(!1);return react.createElement("div",{className:"w-[400px] space-y-4"},react.createElement("div",{className:"flex flex-col items-center gap-2"},react.createElement("button",{onClick:()=>{setShowChild(!0),setMountCount((prev=>prev+1))},className:"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors",disabled:showChild},"Mount Component"),react.createElement("button",{onClick:()=>setShowChild(!1),className:"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors",disabled:!showChild},"Unmount Component")),react.createElement("div",{className:"text-center text-sm text-slate-600 dark:text-slate-400"},"Components Mounted: ",mountCount),react.createElement("div",{className:"min-h-[100px] flex items-center justify-center"},showChild&&react.createElement(MountChild,null)),react.createElement("div",{className:"bg-slate-900 text-slate-300 p-4 rounded-lg font-mono text-sm"},react.createElement("p",{className:"text-slate-500"},"// Check the console for logs:"),react.createElement("p",null,react.createElement("span",{className:"text-green-400"},"console.log"),'("ðŸŸ¢ Component mounted");')),react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},"Click the Mount button to create a new component. Notice how the mount effect runs only once when the component is created! ðŸš€")))},Example={render:()=>react.createElement(MountExample,null)},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:"{\n  render: () => <MountExample />\n}",...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);