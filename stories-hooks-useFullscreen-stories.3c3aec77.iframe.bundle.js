/*! For license information please see stories-hooks-useFullscreen-stories.3c3aec77.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[6768],{"./node_modules/react/cjs/react-jsx-runtime.production.js":(__unused_webpack_module,exports)=>{var REACT_ELEMENT_TYPE=Symbol.for("react.transitional.element"),REACT_FRAGMENT_TYPE=Symbol.for("react.fragment");function jsxProd(type,config,maybeKey){var key=null;if(void 0!==maybeKey&&(key=""+maybeKey),void 0!==config.key&&(key=""+config.key),"key"in config)for(var propName in maybeKey={},config)"key"!==propName&&(maybeKey[propName]=config[propName]);else maybeKey=config;return config=maybeKey.ref,{$$typeof:REACT_ELEMENT_TYPE,type,key,ref:void 0!==config?config:null,props:maybeKey}}exports.Fragment=REACT_FRAGMENT_TYPE,exports.jsx=jsxProd,exports.jsxs=jsxProd},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.js")},"./src/hooks/misc/util.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{AU:()=>off,Bd:()=>isBrowser,lQ:()=>noop,on:()=>on,w2:()=>isNavigator});const noop=()=>{};function on(obj,...args){obj&&obj.addEventListener&&obj.addEventListener(...args)}function off(obj,...args){obj&&obj.removeEventListener&&obj.removeEventListener(...args)}const isBrowser="undefined"!=typeof window,isNavigator="undefined"!=typeof navigator},"./src/hooks/useIsomorphicLayoutEffect.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const __WEBPACK_DEFAULT_EXPORT__=__webpack_require__("./src/hooks/misc/util.ts").Bd?react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect:react__WEBPACK_IMPORTED_MODULE_0__.useEffect},"./src/stories/hooks/useFullscreen.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useFullscreen_stories});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js");const methodMap=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],nativeAPI=(()=>{if("undefined"==typeof document)return!1;const unprefixedMethods=methodMap[0],returnValue={};for(const methodList of methodMap){const exitFullscreenMethod=methodList?.[1];if(exitFullscreenMethod in document){for(const[index,method]of methodList.entries())returnValue[unprefixedMethods[index]]=method;return returnValue}}return!1})(),eventNameMap={change:nativeAPI.fullscreenchange,error:nativeAPI.fullscreenerror};let screenfull={request:(element=document.documentElement,options)=>new Promise(((resolve,reject)=>{const onFullScreenEntered=()=>{screenfull.off("change",onFullScreenEntered),resolve()};screenfull.on("change",onFullScreenEntered);const returnPromise=element[nativeAPI.requestFullscreen](options);returnPromise instanceof Promise&&returnPromise.then(onFullScreenEntered).catch(reject)})),exit:()=>new Promise(((resolve,reject)=>{if(!screenfull.isFullscreen)return void resolve();const onFullScreenExit=()=>{screenfull.off("change",onFullScreenExit),resolve()};screenfull.on("change",onFullScreenExit);const returnPromise=document[nativeAPI.exitFullscreen]();returnPromise instanceof Promise&&returnPromise.then(onFullScreenExit).catch(reject)})),toggle:(element,options)=>screenfull.isFullscreen?screenfull.exit():screenfull.request(element,options),onchange(callback){screenfull.on("change",callback)},onerror(callback){screenfull.on("error",callback)},on(event,callback){const eventName=eventNameMap[event];eventName&&document.addEventListener(eventName,callback,!1)},off(event,callback){const eventName=eventNameMap[event];eventName&&document.removeEventListener(eventName,callback,!1)},raw:nativeAPI};Object.defineProperties(screenfull,{isFullscreen:{get:()=>Boolean(document[nativeAPI.fullscreenElement])},element:{enumerable:!0,get:()=>document[nativeAPI.fullscreenElement]??void 0},isEnabled:{enumerable:!0,get:()=>Boolean(document[nativeAPI.fullscreenEnabled])}}),nativeAPI||(screenfull={isEnabled:!1});const node_modules_screenfull=screenfull;var useIsomorphicLayoutEffect=__webpack_require__("./src/hooks/useIsomorphicLayoutEffect.ts"),util=__webpack_require__("./src/hooks/misc/util.ts");const hooks_useFullscreen=(ref,enabled,options={})=>{const{video,onClose=util.lQ}=options,[isFullscreen,setIsFullscreen]=(0,react.useState)(enabled);return(0,useIsomorphicLayoutEffect.A)((()=>{if(!enabled)return;if(!ref.current)return;const onWebkitEndFullscreen=()=>{video?.current&&(0,util.AU)(video.current,"webkitendfullscreen",onWebkitEndFullscreen),onClose()},onChange=()=>{if(node_modules_screenfull.isEnabled){const isScreenfullFullscreen=node_modules_screenfull.isFullscreen;setIsFullscreen(isScreenfullFullscreen),isScreenfullFullscreen||onClose()}};if(node_modules_screenfull.isEnabled){try{node_modules_screenfull.request(ref.current),setIsFullscreen(!0)}catch(error){onClose(error),setIsFullscreen(!1)}node_modules_screenfull.on("change",onChange)}else video&&video.current&&video.current.webkitEnterFullscreen?(video.current.webkitEnterFullscreen(),(0,util.on)(video.current,"webkitendfullscreen",onWebkitEndFullscreen),setIsFullscreen(!0)):(onClose(),setIsFullscreen(!1));return()=>{if(setIsFullscreen(!1),node_modules_screenfull.isEnabled)try{node_modules_screenfull.off("change",onChange),node_modules_screenfull.exit()}catch{}else video&&video.current&&video.current.webkitExitFullscreen&&((0,util.AU)(video.current,"webkitendfullscreen",onWebkitEndFullscreen),video.current.webkitExitFullscreen())}}),[enabled,video,ref]),isFullscreen};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useFullscreen_stories={title:"Hooks/Browser API/useFullscreen",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useFullscreen` is a hook that enables fullscreen mode for any element or video.\nIt provides a cross-browser solution for handling fullscreen functionality.\n\n### Module Federation Import\n```tsx\nimport { useFullscreen } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useFullscreen } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const ref = useRef(null);\n  const [enabled, setEnabled] = useState(false);\n  const isFullscreen = useFullscreen(ref, enabled);\n\n  return (\n    <div ref={ref}>\n      <button onClick={() => setEnabled(!enabled)}>\n        {isFullscreen ? "Exit" : "Enter"} Fullscreen\n      </button>\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseFullscreen(\n  ref: RefObject<Element>, // Reference to the target element\n  enabled: boolean, // Whether fullscreen should be enabled\n  options?: {\n    video?: RefObject<HTMLVideoElement>, // Optional video element reference\n    onClose?: (error?: Error) => void // Callback when fullscreen is closed\n  }\n): boolean // Whether the element is currently in fullscreen\n```\n\n### Returns\n```tsx\nboolean // Whether the element is currently in fullscreen mode\n```\n\n### Browser Compatibility\nUses Screenfull.js for cross-browser compatibility:\n- Modern browsers: requestFullscreen API\n- Safari iOS: webkitEnterFullscreen for video\nSupported in most modern browsers.\n\n### Related Resources\n- [MDN: Fullscreen API](https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API)\n- [Screenfull.js](https://github.com/sindresorhus/screenfull.js/)'}}},tags:["autodocs"],decorators:[Story=>(0,jsx_runtime.jsx)(ThemeProvider.N,{children:(0,jsx_runtime.jsx)(Story,{})})]},Example={render:()=>{const elementRef=(0,react.useRef)(null),[elementEnabled,setElementEnabled]=(0,react.useState)(!1),isElementFullscreen=hooks_useFullscreen(elementRef,elementEnabled),videoRef=(0,react.useRef)(null),[videoEnabled,setVideoEnabled]=(0,react.useState)(!1),isVideoFullscreen=hooks_useFullscreen(videoRef,videoEnabled,{video:videoRef,onClose:()=>{setVideoEnabled(!1),console.log("Video fullscreen closed")}});return(0,jsx_runtime.jsx)("div",{className:"w-[400px]",children:(0,jsx_runtime.jsxs)("div",{className:"bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6",children:[(0,jsx_runtime.jsxs)("div",{className:"space-y-2",children:[(0,jsx_runtime.jsx)("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100",children:"Element Fullscreen"}),(0,jsx_runtime.jsx)("div",{ref:elementRef,className:"bg-slate-100 dark:bg-slate-700 p-4 rounded transition-all "+(isElementFullscreen?"fixed inset-0 z-50 flex items-center justify-center bg-white dark:bg-slate-900":""),children:(0,jsx_runtime.jsxs)("div",{className:"text-center",children:[(0,jsx_runtime.jsx)("p",{className:"text-sm text-slate-500 dark:text-slate-400 mb-2",children:isElementFullscreen?"You're in fullscreen mode!":"Click the button below to enter fullscreen"}),(0,jsx_runtime.jsxs)("button",{onClick:()=>setElementEnabled(!elementEnabled),className:"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600",children:[isElementFullscreen?"Exit":"Enter"," Fullscreen"]})]})})]}),(0,jsx_runtime.jsxs)("div",{className:"space-y-2",children:[(0,jsx_runtime.jsx)("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100",children:"Video Fullscreen"}),(0,jsx_runtime.jsxs)("div",{className:"bg-green-100 dark:bg-green-900/20 p-4 rounded",children:[(0,jsx_runtime.jsx)("video",{ref:videoRef,src:"https://dn720407.ca.archive.org/0/items/rick-roll/Rick%20Roll.ia.mp4",controls:!0,className:"w-full rounded"}),(0,jsx_runtime.jsxs)("button",{onClick:()=>setVideoEnabled(!videoEnabled),className:"mt-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 w-full",children:[isVideoFullscreen?"Exit":"Enter"," Video Fullscreen"]})]})]}),(0,jsx_runtime.jsx)("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded",children:(0,jsx_runtime.jsx)("p",{className:"text-sm text-blue-600 dark:text-blue-400",children:"Try both fullscreen options! The element example shows how to make any div fullscreen, while the video example demonstrates native video fullscreen support. Press ESC or the buttons to exit fullscreen mode. 🖥️"})})]})})}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // Example 1: Basic Element Fullscreen\n    const elementRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\n    const [elementEnabled, setElementEnabled] = useState(false);\n    const isElementFullscreen = useFullscreen(elementRef, elementEnabled);\n\n    // Example 2: Video Fullscreen\n    const videoRef = useRef<HTMLVideoElement>(null) as React.RefObject<HTMLVideoElement>;\n    const [videoEnabled, setVideoEnabled] = useState(false);\n    const isVideoFullscreen = useFullscreen(videoRef, videoEnabled, {\n      video: videoRef,\n      onClose: () => {\n        setVideoEnabled(false);\n        console.log("Video fullscreen closed");\n      }\n    });\n    return <div className="w-[400px]">\n        <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6">\n          {/* Element Fullscreen Example */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Element Fullscreen\n            </h3>\n            <div ref={elementRef} className={`bg-slate-100 dark:bg-slate-700 p-4 rounded transition-all ${isElementFullscreen ? "fixed inset-0 z-50 flex items-center justify-center bg-white dark:bg-slate-900" : ""}`}>\n              <div className="text-center">\n                <p className="text-sm text-slate-500 dark:text-slate-400 mb-2">\n                  {isElementFullscreen ? "You\'re in fullscreen mode!" : "Click the button below to enter fullscreen"}\n                </p>\n                <button onClick={() => setElementEnabled(!elementEnabled)} className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">\n                  {isElementFullscreen ? "Exit" : "Enter"} Fullscreen\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Video Fullscreen Example */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Video Fullscreen\n            </h3>\n            <div className="bg-green-100 dark:bg-green-900/20 p-4 rounded">\n              <video ref={videoRef} src="https://dn720407.ca.archive.org/0/items/rick-roll/Rick%20Roll.ia.mp4" controls className="w-full rounded" />\n              <button onClick={() => setVideoEnabled(!videoEnabled)} className="mt-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 w-full">\n                {isVideoFullscreen ? "Exit" : "Enter"} Video Fullscreen\n              </button>\n            </div>\n          </div>\n\n          {/* Instructions */}\n          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n            <p className="text-sm text-blue-600 dark:text-blue-400">\n              Try both fullscreen options! The element example shows how to make\n              any div fullscreen, while the video example demonstrates native\n              video fullscreen support. Press ESC or the buttons to exit\n              fullscreen mode. 🖥️\n            </p>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThemeProviderContext.Provider,{...props,value,children})}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);