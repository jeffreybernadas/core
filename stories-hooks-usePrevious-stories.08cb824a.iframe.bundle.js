"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[1360],{"./src/stories/hooks/usePrevious.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CounterExample:()=>CounterExample,__namedExportsOrder:()=>__namedExportsOrder,default:()=>usePrevious_stories});var react=__webpack_require__("./node_modules/react/index.js");var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const usePrevious_stories={title:"Hooks/usePrevious",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:"`usePrevious` is a hook that stores and returns the previous value of a state variable.\nIt's useful for comparing current and previous values or implementing undo functionality.\n\n### Module Federation Import\n```tsx\nimport { usePrevious } from \"@core/hooks\";\n```\n\n### NPM Package Import\n```tsx\nimport { usePrevious } from \"@bernz322/core/hooks\";\n```\n\n### Basic Usage\n```tsx\nconst UndoComponent = () => {\n  const [text, setText] = useState('');\n  const previousText = usePrevious(text);\n\n  const handleUndo = () => {\n    if (previousText !== undefined) {\n      setText(previousText);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <input\n          type=\"text\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n        <button\n          onClick={handleUndo}\n          disabled={previousText === undefined}\n        >\n          Undo\n        </button>\n      </div>\n      <div>Previous text: {previousText || '(none)'}</div>\n    </div>\n  );\n};\n```\n\n### Advanced Usage\n```tsx\nconst ComparisonComponent = () => {\n  const [count, setCount] = useState(0);\n  const prevCount = usePrevious(count);\n\n  const trend = React.useMemo(() => {\n    if (prevCount === undefined) return 'neutral';\n    return count > prevCount ? 'increasing' : count < prevCount ? 'decreasing' : 'stable';\n  }, [count, prevCount]);\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setCount(c => c - 1)}>-</button>\n        <span>{count}</span>\n        <button onClick={() => setCount(c => c + 1)}>+</button>\n      </div>\n      <div>Trend: {trend}</div>\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nusePrevious<T>(\n  state: T // The state value to track\n): T | undefined\n```\n\n### Returns\n- T | undefined: The previous value of the state (undefined on first render)\n\n### Browser Compatibility\nUses React's useRef and useEffect hooks, supported in all modern browsers.\n\n### Related Resources\n- [React useRef Hook](https://react.dev/reference/react/useRef)\n- [React useEffect Hook](https://react.dev/reference/react/useEffect)"}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},CounterExample={render:()=>{const[count,setCount]=(0,react.useState)(0),prevCount=function usePrevious(state){const ref=(0,react.useRef)(void 0);return(0,react.useEffect)((()=>{ref.current=state})),ref.current}(count);return react.createElement("div",{className:"space-y-6 max-w-lg"},react.createElement("div",null,react.createElement("h3",{className:"text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100"},"Counter with History"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-800 p-4 rounded-lg space-y-4"},react.createElement("div",{className:"space-y-2"},react.createElement("div",{className:"text-sm text-slate-600 dark:text-slate-400"},"Current count: ",count),react.createElement("div",{className:"text-sm text-slate-600 dark:text-slate-400"},"Previous count: ",prevCount??"None")),react.createElement("button",{onClick:()=>setCount((c=>c+1)),className:"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"},"Increment (+1)"))))}},__namedExportsOrder=["CounterExample"];CounterExample.parameters={...CounterExample.parameters,docs:{...CounterExample.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [count, setCount] = useState(0);\n    const prevCount = usePrevious(count);\n    return <div className="space-y-6 max-w-lg">\n        <div>\n          <h3 className="text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100">\n            Counter with History\n          </h3>\n          <div className="bg-slate-100 dark:bg-slate-800 p-4 rounded-lg space-y-4">\n            <div className="space-y-2">\n              <div className="text-sm text-slate-600 dark:text-slate-400">\n                Current count: {count}\n              </div>\n              <div className="text-sm text-slate-600 dark:text-slate-400">\n                Previous count: {prevCount ?? "None"}\n              </div>\n            </div>\n            <button onClick={() => setCount(c => c + 1)} className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">\n              Increment (+1)\n            </button>\n          </div>\n        </div>\n      </div>;\n  }\n}',...CounterExample.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);