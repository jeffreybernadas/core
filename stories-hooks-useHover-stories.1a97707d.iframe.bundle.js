"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[8019],{"./src/hooks/misc/util.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{AU:()=>off,Bd:()=>isBrowser,lQ:()=>noop,on:()=>on,w2:()=>isNavigator});const noop=()=>{};function on(obj,...args){obj&&obj.addEventListener&&obj.addEventListener(...args)}function off(obj,...args){obj&&obj.removeEventListener&&obj.removeEventListener(...args)}const isBrowser="undefined"!=typeof window,isNavigator="undefined"!=typeof navigator},"./src/stories/hooks/useHover.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useHover_stories});var react=__webpack_require__("./node_modules/react/index.js"),react_namespaceObject=__webpack_require__.t(react,2),util=__webpack_require__("./src/hooks/misc/util.ts");const{useState}=react_namespaceObject,hooks_useHover=element=>{const[state,setState]=useState(!1);"function"==typeof element&&(element=element(state));var originalOnMouseLeave,originalOnMouseEnter;return[react.cloneElement(element,{onMouseEnter:(originalOnMouseEnter=element.props.onMouseEnter,event=>{(originalOnMouseEnter||util.lQ)(event),setState(!0)}),onMouseLeave:(originalOnMouseLeave=element.props.onMouseLeave,event=>{(originalOnMouseLeave||util.lQ)(event),setState(!1)})}),state]};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useHover_stories={title:"Hooks/Event & Interaction/useHover",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:"`useHover` is a hook that detects when a mouse enters or leaves an element.\nIt provides a simple way to add hover interactions to any React element.\n\n### Module Federation Import\n```tsx\nimport { useHover } from \"@core/hooks\";\n```\n\n### NPM Package Import\n```tsx\nimport { useHover } from \"@bernz322/core/hooks\";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const [hoverable, isHovered] = useHover(\n    <div className=\"p-4 border rounded\">\n      Hover me!\n    </div>\n  );\n\n  return hoverable;\n};\n```\n\n### Advanced Usage\n```tsx\nconst DynamicHover = () => {\n  const [hoverable, isHovered] = useHover((hovered) => (\n    <div className={`p-4 border rounded ${hovered ? 'bg-blue-500' : ''}`}>\n      {hovered ? 'üéâ Hovering!' : 'Hover me!'}\n    </div>\n  ));\n\n  return hoverable;\n};\n```\n\n### Parameters\n```tsx\nelement: Element // React element or function returning a React element\n```\n\n### Returns\n```tsx\n[React.ReactElement, boolean] // [Enhanced element with hover handlers, hover state]\n```\n\n### Browser Compatibility\nUses standard mouse events:\n- mouseenter\n- mouseleave\nSupported in all modern browsers.\n\n### Related Resources\n- [MDN: mouseenter event](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event)\n- [MDN: mouseleave event](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event)"}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},Example={render:()=>{const[basicElement]=hooks_useHover((isHovered=>react.createElement("div",{className:"p-4 bg-white dark:bg-slate-700 rounded-lg shadow-md transition-all duration-300 transform hover:scale-105"},react.createElement("h3",{className:"text-lg font-semibold mb-2"},"Basic Hover"),react.createElement("p",{className:"text-sm text-slate-600 dark:text-slate-300"},isHovered?"üéâ You're hovering!":"Hover over me!")))),[cardElement]=hooks_useHover((isHovered=>react.createElement("div",{className:"p-6 rounded-lg shadow-lg transition-all duration-300 "+(isHovered?"bg-blue-500 text-white transform -translate-y-1":"bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100")},react.createElement("h3",{className:"text-lg font-semibold mb-2"},"Interactive Card"),react.createElement("p",{className:"text-sm opacity-90"},isHovered?"‚ú® Wow! Such interactivity!":"Hover to see the magic happen")))),[tooltipElement]=hooks_useHover((isHovered=>react.createElement("div",{className:"relative inline-block"},react.createElement("button",{className:"px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors"},"Hover for Info"),react.createElement("div",{className:"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-1 bg-black text-white text-sm rounded transition-opacity "+(isHovered?"opacity-100":"opacity-0")},"Tooltip!",react.createElement("div",{className:"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-black"}))))),[imageElement]=hooks_useHover((isHovered=>react.createElement("div",{className:"relative overflow-hidden rounded-lg"},react.createElement("img",{src:"https://picsum.photos/300/200",alt:"Random",className:"transition-transform duration-500 "+(isHovered?"scale-110":"scale-100")}),react.createElement("div",{className:"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center transition-opacity duration-300 "+(isHovered?"opacity-0":"opacity-100")},react.createElement("span",{className:"text-white text-lg"},"View Image")))));return react.createElement("div",{className:"space-y-8 w-[300px]"},basicElement,cardElement,react.createElement("div",{className:"flex justify-center"},tooltipElement),imageElement,react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},"Hover over each element to see different hover effects! Each example shows a unique way to use the useHover hook üñ±Ô∏è")))}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // Basic hover example\n    const createBasicElement = (isHovered: boolean) => <div className="p-4 bg-white dark:bg-slate-700 rounded-lg shadow-md transition-all duration-300 transform hover:scale-105">\n        <h3 className="text-lg font-semibold mb-2">Basic Hover</h3>\n        <p className="text-sm text-slate-600 dark:text-slate-300">\n          {isHovered ? "üéâ You\'re hovering!" : "Hover over me!"}\n        </p>\n      </div>;\n    const [basicElement] = useHover(createBasicElement);\n\n    // Interactive card example\n    const [cardElement] = useHover(isHovered => <div className={`p-6 rounded-lg shadow-lg transition-all duration-300 ${isHovered ? "bg-blue-500 text-white transform -translate-y-1" : "bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100"}`}>\n        <h3 className="text-lg font-semibold mb-2">Interactive Card</h3>\n        <p className="text-sm opacity-90">\n          {isHovered ? "‚ú® Wow! Such interactivity!" : "Hover to see the magic happen"}\n        </p>\n      </div>);\n\n    // Tooltip example\n    const createTooltipElement = (isHovered: boolean) => <div className="relative inline-block">\n        <button className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors">\n          Hover for Info\n        </button>\n        <div className={`absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-1 bg-black text-white text-sm rounded transition-opacity ${isHovered ? "opacity-100" : "opacity-0"}`}>\n          Tooltip!\n          <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-black" />\n        </div>\n      </div>;\n    const [tooltipElement] = useHover(createTooltipElement);\n\n    // Image gallery example\n    const [imageElement] = useHover(isHovered => <div className="relative overflow-hidden rounded-lg">\n        <img src="https://picsum.photos/300/200" alt="Random" className={`transition-transform duration-500 ${isHovered ? "scale-110" : "scale-100"}`} />\n        <div className={`absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center transition-opacity duration-300 ${isHovered ? "opacity-0" : "opacity-100"}`}>\n          <span className="text-white text-lg">View Image</span>\n        </div>\n      </div>);\n    return <div className="space-y-8 w-[300px]">\n        {basicElement}\n        {cardElement}\n        <div className="flex justify-center">{tooltipElement}</div>\n        {imageElement}\n\n        {/* Instructions */}\n        <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n          <p className="text-sm text-blue-600 dark:text-blue-400">\n            Hover over each element to see different hover effects! Each example\n            shows a unique way to use the useHover hook üñ±Ô∏è\n          </p>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);