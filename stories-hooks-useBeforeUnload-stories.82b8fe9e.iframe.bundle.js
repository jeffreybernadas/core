"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[943],{"./src/hooks/misc/util.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{AU:()=>off,Bd:()=>isBrowser,lQ:()=>noop,on:()=>on,w2:()=>isNavigator});const noop=()=>{};function on(obj,...args){obj&&obj.addEventListener&&obj.addEventListener(...args)}function off(obj,...args){obj&&obj.removeEventListener&&obj.removeEventListener(...args)}const isBrowser="undefined"!=typeof window,isNavigator="undefined"!=typeof navigator},"./src/stories/hooks/useBeforeUnload.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useBeforeUnload_stories});var react=__webpack_require__("./node_modules/react/index.js"),util=__webpack_require__("./src/hooks/misc/util.ts");const hooks_useBeforeUnload=(enabled=!0,message)=>{const handler=(0,react.useCallback)((event=>{if("function"!=typeof enabled||enabled())return event.preventDefault(),message&&(event.returnValue=message),message}),[enabled,message]);(0,react.useEffect)((()=>{if(enabled)return(0,util.on)(window,"beforeunload",handler),()=>(0,util.AU)(window,"beforeunload",handler)}),[enabled,handler])};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useBeforeUnload_stories={title:"Hooks/Browser API/useBeforeUnload",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useBeforeUnload` is a hook that prompts users with a confirmation dialog when they attempt to leave the page.\nIt\'s useful for preventing accidental navigation away from forms or unsaved changes.\n\n### Module Federation Import\n```tsx\nimport { useBeforeUnload } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useBeforeUnload } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const [isDirty, setIsDirty] = useState(false);\n\n  useBeforeUnload(isDirty, "You have unsaved changes. Are you sure you want to leave?");\n\n  return (\n    <form>\n      <input onChange={() => setIsDirty(true)} />\n    </form>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseBeforeUnload(\n  enabled: boolean | (() => boolean), // Whether to show the prompt\n  message?: string // Optional custom message (may not work in some browsers)\n): void\n```\n\n### Browser Compatibility\n- The beforeunload event is supported in all modern browsers\n- Custom messages may not be shown in some browsers for security reasons\n- Chrome 60+ shows a generic message instead of custom messages\n- Firefox 44+ shows a generic message instead of custom messages\n\n### Related Resources\n- [MDN: beforeunload event](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event)'}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},Example={render:()=>{const[formData,setFormData]=(0,react.useState)({name:"",email:"",message:""}),[isDirty,setIsDirty]=(0,react.useState)(!1),[isEnabled,setIsEnabled]=(0,react.useState)(!0);hooks_useBeforeUnload(isEnabled&&isDirty,"You have unsaved changes. Are you sure you want to leave?");const handleChange=e=>{setFormData((prev=>({...prev,[e.target.name]:e.target.value}))),setIsDirty(!0)};return react.createElement("div",{className:"space-y-6 max-w-lg"},react.createElement("div",null,react.createElement("h3",{className:"text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100"},"Form with Navigation Warning"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-800 p-4 rounded-lg"},react.createElement("div",{className:"space-y-6"},react.createElement("div",{className:"flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("span",{className:"text-sm text-blue-600 dark:text-blue-400"},"Try to close this tab or navigate away after making changes"," ",isDirty?"‚úèÔ∏è":"‚ú®"),react.createElement("div",{className:"flex items-center space-x-2"},react.createElement("span",{className:"text-sm text-slate-600 dark:text-slate-400"},"Warning ",isEnabled?"On":"Off"),react.createElement("button",{onClick:()=>setIsEnabled(!isEnabled),className:"relative inline-flex h-6 w-11 items-center rounded-full transition-colors "+(isEnabled?"bg-green-500":"bg-slate-300 dark:bg-slate-600")},react.createElement("span",{className:"inline-block h-4 w-4 transform rounded-full bg-white transition-transform "+(isEnabled?"translate-x-6":"translate-x-1")})))),react.createElement("form",{onSubmit:e=>{e.preventDefault(),setIsDirty(!1),alert("Form submitted! You can now leave without warning.")},className:"space-y-4"},react.createElement("div",{className:"space-y-2"},react.createElement("label",{className:"block text-sm font-medium text-slate-700 dark:text-slate-300"},"Name"),react.createElement("input",{type:"text",name:"name",value:formData.name,onChange:handleChange,className:"w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100",placeholder:"John Doe"})),react.createElement("div",{className:"space-y-2"},react.createElement("label",{className:"block text-sm font-medium text-slate-700 dark:text-slate-300"},"Email"),react.createElement("input",{type:"email",name:"email",value:formData.email,onChange:handleChange,className:"w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100",placeholder:"john@example.com"})),react.createElement("div",{className:"space-y-2"},react.createElement("label",{className:"block text-sm font-medium text-slate-700 dark:text-slate-300"},"Message"),react.createElement("textarea",{name:"message",value:formData.message,onChange:handleChange,rows:3,className:"w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100",placeholder:"Your message here..."})),react.createElement("div",{className:"flex space-x-2"},react.createElement("button",{type:"submit",className:"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors"},"Submit"),react.createElement("button",{type:"button",onClick:()=>{setFormData({name:"",email:"",message:""}),setIsDirty(!1)},className:"px-4 py-2 bg-slate-500 hover:bg-slate-600 text-white rounded-md transition-colors"},"Reset"))),react.createElement("div",{className:"text-sm rounded p-2 "+(isDirty?"bg-yellow-50 dark:bg-yellow-900/20 text-yellow-600 dark:text-yellow-400":"bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400")},"Form is ",isDirty?"dirty":"pristine"),react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},"Make changes to the form and try to close the tab or navigate away - you'll see a warning! üö´"))))))}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [formData, setFormData] = useState({\n      name: "",\n      email: "",\n      message: ""\n    });\n    const [isDirty, setIsDirty] = useState(false);\n    const [isEnabled, setIsEnabled] = useState(true);\n\n    // Enable the beforeunload prompt when form is dirty\n    useBeforeUnload(isEnabled && isDirty, "You have unsaved changes. Are you sure you want to leave?");\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setFormData(prev => ({\n        ...prev,\n        [e.target.name]: e.target.value\n      }));\n      setIsDirty(true);\n    };\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      setIsDirty(false);\n      alert("Form submitted! You can now leave without warning.");\n    };\n    const handleReset = () => {\n      setFormData({\n        name: "",\n        email: "",\n        message: ""\n      });\n      setIsDirty(false);\n    };\n    return <div className="space-y-6 max-w-lg">\n        <div>\n          <h3 className="text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100">\n            Form with Navigation Warning\n          </h3>\n          <div className="bg-slate-100 dark:bg-slate-800 p-4 rounded-lg">\n            <div className="space-y-6">\n              {/* Controls */}\n              <div className="flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n                <span className="text-sm text-blue-600 dark:text-blue-400">\n                  Try to close this tab or navigate away after making changes{" "}\n                  {isDirty ? "‚úèÔ∏è" : "‚ú®"}\n                </span>\n                <div className="flex items-center space-x-2">\n                  <span className="text-sm text-slate-600 dark:text-slate-400">\n                    Warning {isEnabled ? "On" : "Off"}\n                  </span>\n                  <button onClick={() => setIsEnabled(!isEnabled)} className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${isEnabled ? "bg-green-500" : "bg-slate-300 dark:bg-slate-600"}`}>\n                    <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${isEnabled ? "translate-x-6" : "translate-x-1"}`} />\n                  </button>\n                </div>\n              </div>\n\n              {/* Form */}\n              <form onSubmit={handleSubmit} className="space-y-4">\n                <div className="space-y-2">\n                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">\n                    Name\n                  </label>\n                  <input type="text" name="name" value={formData.name} onChange={handleChange} className="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100" placeholder="John Doe" />\n                </div>\n\n                <div className="space-y-2">\n                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">\n                    Email\n                  </label>\n                  <input type="email" name="email" value={formData.email} onChange={handleChange} className="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100" placeholder="john@example.com" />\n                </div>\n\n                <div className="space-y-2">\n                  <label className="block text-sm font-medium text-slate-700 dark:text-slate-300">\n                    Message\n                  </label>\n                  <textarea name="message" value={formData.message} onChange={handleChange} rows={3} className="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100" placeholder="Your message here..." />\n                </div>\n\n                <div className="flex space-x-2">\n                  <button type="submit" className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors">\n                    Submit\n                  </button>\n                  <button type="button" onClick={handleReset} className="px-4 py-2 bg-slate-500 hover:bg-slate-600 text-white rounded-md transition-colors">\n                    Reset\n                  </button>\n                </div>\n              </form>\n\n              {/* Status */}\n              <div className={`text-sm rounded p-2 ${isDirty ? "bg-yellow-50 dark:bg-yellow-900/20 text-yellow-600 dark:text-yellow-400" : "bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400"}`}>\n                Form is {isDirty ? "dirty" : "pristine"}\n              </div>\n\n              {/* Instructions */}\n              <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n                <p className="text-sm text-blue-600 dark:text-blue-400">\n                  Make changes to the form and try to close the tab or navigate\n                  away - you\'ll see a warning! üö´\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);