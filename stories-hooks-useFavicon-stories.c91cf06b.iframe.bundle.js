"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[9673],{"./src/stories/hooks/useFavicon.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useFavicon_stories});var react=__webpack_require__("./node_modules/react/index.js");const hooks_useFavicon=href=>{(0,react.useEffect)((()=>{const link=document.querySelector("link[rel*='icon']")||document.createElement("link");link.type="image/x-icon",link.rel="shortcut icon",link.href=href,document.getElementsByTagName("head")[0].appendChild(link)}),[href])};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useFavicon_stories={title:"Hooks/Browser API/useFavicon",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useFavicon` is a hook that dynamically updates the website\'s favicon.\nIt\'s useful for changing the favicon based on application state or user preferences.\n\n### Module Federation Import\n```tsx\nimport { useFavicon } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useFavicon } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  useFavicon("https://example.com/favicon.ico");\n  return <div>Check your browser tab!</div>;\n};\n```\n\n### Parameters\n```tsx\nuseFavicon(\n  href: string // URL of the favicon image\n): void\n```\n\n### Returns\n```tsx\nvoid\n```\n\n### Browser Compatibility\nUses standard DOM APIs:\n- document.querySelector\n- document.createElement\nSupported in all modern browsers.\n\n### Related Resources\n- [MDN: Link types: icon](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/icon)\n- [MDN: Favicons](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML#adding_custom_icons_to_your_site)'}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},Example={render:()=>{const[currentFavicon,setCurrentFavicon]=(0,react.useState)("https://jeffreybernadas.github.io/core/favicon.ico");return hooks_useFavicon(currentFavicon),react.createElement("div",{className:"w-[400px]"},react.createElement("div",{className:"bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6"},react.createElement("div",{className:"space-y-2"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Current Favicon"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-700 p-4 rounded text-center"},react.createElement("img",{src:currentFavicon,alt:"Current Favicon",className:"w-8 h-8 mx-auto mb-2"}),react.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Check your browser tab!"))),react.createElement("div",{className:"space-y-2"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Choose a Favicon"),react.createElement("div",{className:"grid grid-cols-2 gap-2"},[{name:"Default",url:"https://jeffreybernadas.github.io/core/favicon.ico"},{name:"GitHub",url:"https://github.com/favicon.ico"},{name:"NPM",url:"https://static-production.npmjs.com/f1786e9b7cba9753ca7b9c40e8b98f67.png"},{name:"React",url:"https://reactjs.org/favicon.ico"}].map((favicon=>react.createElement("button",{key:favicon.name,onClick:()=>setCurrentFavicon(favicon.url),className:"p-3 rounded flex flex-col items-center gap-2 transition-colors "+(currentFavicon===favicon.url?"bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300":"bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-600")},react.createElement("img",{src:favicon.url,alt:favicon.name,className:"w-6 h-6"}),react.createElement("span",{className:"text-sm"},favicon.name)))))),react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},"Click on different favicon options and watch your browser tab icon change! The hook dynamically updates the favicon without page reload. ðŸŽ¨"))))}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [currentFavicon, setCurrentFavicon] = useState<string>("https://jeffreybernadas.github.io/core/favicon.ico");\n    const faviconOptions = [{\n      name: "Default",\n      url: "https://jeffreybernadas.github.io/core/favicon.ico"\n    }, {\n      name: "GitHub",\n      url: "https://github.com/favicon.ico"\n    }, {\n      name: "NPM",\n      url: "https://static-production.npmjs.com/f1786e9b7cba9753ca7b9c40e8b98f67.png"\n    }, {\n      name: "React",\n      url: "https://reactjs.org/favicon.ico"\n    }];\n\n    // Use the hook to update favicon\n    useFavicon(currentFavicon);\n    return <div className="w-[400px]">\n        <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6">\n          {/* Current Favicon Display */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Current Favicon\n            </h3>\n            <div className="bg-slate-100 dark:bg-slate-700 p-4 rounded text-center">\n              <img src={currentFavicon} alt="Current Favicon" className="w-8 h-8 mx-auto mb-2" />\n              <p className="text-sm text-slate-500 dark:text-slate-400">\n                Check your browser tab!\n              </p>\n            </div>\n          </div>\n\n          {/* Favicon Options */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Choose a Favicon\n            </h3>\n            <div className="grid grid-cols-2 gap-2">\n              {faviconOptions.map(favicon => <button key={favicon.name} onClick={() => setCurrentFavicon(favicon.url)} className={`p-3 rounded flex flex-col items-center gap-2 transition-colors ${currentFavicon === favicon.url ? "bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300" : "bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-600"}`}>\n                  <img src={favicon.url} alt={favicon.name} className="w-6 h-6" />\n                  <span className="text-sm">{favicon.name}</span>\n                </button>)}\n            </div>\n          </div>\n\n          {/* Instructions */}\n          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n            <p className="text-sm text-blue-600 dark:text-blue-400">\n              Click on different favicon options and watch your browser tab icon\n              change! The hook dynamically updates the favicon without page\n              reload. ðŸŽ¨\n            </p>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);