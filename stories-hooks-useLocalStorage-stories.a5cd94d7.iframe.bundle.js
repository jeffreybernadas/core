"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[2199],{"./src/hooks/misc/util.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{AU:()=>off,Bd:()=>isBrowser,lQ:()=>noop,on:()=>on,w2:()=>isNavigator});const noop=()=>{};function on(obj,...args){obj&&obj.addEventListener&&obj.addEventListener(...args)}function off(obj,...args){obj&&obj.removeEventListener&&obj.removeEventListener(...args)}const isBrowser="undefined"!=typeof window,isNavigator="undefined"!=typeof navigator},"./src/stories/hooks/useLocalStorage.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ColorPreferenceExample:()=>ColorPreferenceExample,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useLocalStorage_stories});var react=__webpack_require__("./node_modules/react/index.js"),util=__webpack_require__("./src/hooks/misc/util.ts");const hooks_useLocalStorage=(key,initialValue,options)=>{if(!util.Bd)return[initialValue,util.lQ,util.lQ];if(!key)throw new Error("useLocalStorage key may not be falsy");const deserializer=options?options.raw?value=>value:options.deserializer:JSON.parse,initializer=(0,react.useRef)((key=>{try{const serializer=options?options.raw?String:options.serializer:JSON.stringify,localStorageValue=localStorage.getItem(key);return null!==localStorageValue?deserializer(localStorageValue):(initialValue&&localStorage.setItem(key,serializer(initialValue)),initialValue)}catch{return initialValue}})),[state,setState]=(0,react.useState)((()=>initializer.current(key)));(0,react.useLayoutEffect)((()=>setState(initializer.current(key))),[key]);const set=(0,react.useCallback)((valOrFunc=>{try{const newState="function"==typeof valOrFunc?valOrFunc(state):valOrFunc;if(void 0===newState)return;let value;value=options?options.raw?"string"==typeof newState?newState:JSON.stringify(newState):options.serializer?options.serializer(newState):JSON.stringify(newState):JSON.stringify(newState),localStorage.setItem(key,value),setState(deserializer(value))}catch{}}),[key,setState]),remove=(0,react.useCallback)((()=>{try{localStorage.removeItem(key),setState(void 0)}catch{}}),[key,setState]);return[state,set,remove]};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useLocalStorage_stories={title:"Hooks/useLocalStorage",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:"`useLocalStorage` is a hook that synchronizes state with localStorage, providing persistent storage across page reloads.\nIt's useful for saving user preferences, form data, or any other state that needs to persist.\n\n### Module Federation Import\n```tsx\nimport { useLocalStorage } from \"@core/hooks\";\n```\n\n### NPM Package Import\n```tsx\nimport { useLocalStorage } from \"@bernz322/core/hooks\";\n```\n\n### Basic Usage\n```tsx\nconst ThemePreference = () => {\n  const [theme, setTheme] = useLocalStorage('theme', 'light');\n\n  return (\n    <div>\n      <div>Current theme: {theme}</div>\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n        Toggle Theme\n      </button>\n    </div>\n  );\n};\n```\n\n### Advanced Usage\n```tsx\nconst UserSettings = () => {\n  const [settings, setSettings] = useLocalStorage('userSettings', {\n    notifications: true,\n    fontSize: 14,\n    language: 'en'\n  });\n\n  const updateSetting = (key: keyof typeof settings, value: any) => {\n    setSettings({ ...settings, [key]: value });\n  };\n\n  return (\n    <div>\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={settings.notifications}\n          onChange={(e) => updateSetting('notifications', e.target.checked)}\n        />\n        Enable Notifications\n      </div>\n      <div>\n        <select\n          value={settings.language}\n          onChange={(e) => updateSetting('language', e.target.value)}\n        >\n          <option value=\"en\">English</option>\n          <option value=\"es\">Spanish</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseLocalStorage<T>(\n  key: string,     // localStorage key to store the value\n  initialValue: T  // Initial value if no value exists in localStorage\n): [T, (value: T | ((val: T) => T)) => void]\n```\n\n### Returns\nA tuple containing:\n- state (T): Current state value\n- setState: Function to update state, accepts either a new value or an updater function\n\n### Browser Compatibility\nUses the Web Storage API (localStorage), supported in all modern browsers.\n\n### Related Resources\n- [MDN: Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API)\n- [MDN: Window.localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)"}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},ColorPreferenceExample={render:()=>{const[favoriteColor,setFavoriteColor]=(0,react.useState)(""),[savedColors,setSavedColors]=hooks_useLocalStorage("favoriteColors",[]);return react.createElement("div",{className:"space-y-6 max-w-lg"},react.createElement("div",null,react.createElement("h3",{className:"text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100"},"Color Preferences"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-800 p-4 rounded-lg space-y-4"},react.createElement("div",{className:"flex gap-2"},react.createElement("select",{value:favoriteColor,onChange:e=>setFavoriteColor(e.target.value),className:"px-3 py-2 border rounded"},react.createElement("option",{value:""},"Select a color"),["red","blue","green","purple","orange"].map((color=>react.createElement("option",{key:color,value:color},color)))),react.createElement("button",{onClick:()=>{favoriteColor&&!savedColors?.includes(favoriteColor)&&(setSavedColors([...savedColors||[],favoriteColor]),setFavoriteColor(""))},disabled:!favoriteColor,className:"px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"},"Save")),react.createElement("div",{className:"flex flex-wrap gap-2"},savedColors?.map((color=>react.createElement("div",{key:color,className:"flex items-center gap-2 px-3 py-1 bg-white dark:bg-slate-700 rounded"},react.createElement("div",{className:"w-4 h-4 rounded-full",style:{backgroundColor:color}}),react.createElement("span",{className:"text-sm"},color),react.createElement("button",{onClick:()=>(color=>{setSavedColors(savedColors?.filter((c=>c!==color))||[])})(color),className:"text-red-500 hover:text-red-700"},"×"))))))))}},__namedExportsOrder=["ColorPreferenceExample"];ColorPreferenceExample.parameters={...ColorPreferenceExample.parameters,docs:{...ColorPreferenceExample.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [favoriteColor, setFavoriteColor] = useState("");\n    const [savedColors, setSavedColors] = useLocalStorage<string[]>("favoriteColors", []);\n    const colors = ["red", "blue", "green", "purple", "orange"];\n    const saveColor = () => {\n      if (favoriteColor && !savedColors?.includes(favoriteColor)) {\n        setSavedColors([...(savedColors || []), favoriteColor]);\n        setFavoriteColor("");\n      }\n    };\n    const removeColor = (color: string) => {\n      setSavedColors(savedColors?.filter(c => c !== color) || []);\n    };\n    return <div className="space-y-6 max-w-lg">\n        <div>\n          <h3 className="text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100">\n            Color Preferences\n          </h3>\n          <div className="bg-slate-100 dark:bg-slate-800 p-4 rounded-lg space-y-4">\n            <div className="flex gap-2">\n              <select value={favoriteColor} onChange={e => setFavoriteColor(e.target.value)} className="px-3 py-2 border rounded">\n                <option value="">Select a color</option>\n                {colors.map(color => <option key={color} value={color}>\n                    {color}\n                  </option>)}\n              </select>\n              <button onClick={saveColor} disabled={!favoriteColor} className="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50">\n                Save\n              </button>\n            </div>\n            <div className="flex flex-wrap gap-2">\n              {savedColors?.map(color => <div key={color} className="flex items-center gap-2 px-3 py-1 bg-white dark:bg-slate-700 rounded">\n                  <div className="w-4 h-4 rounded-full" style={{\n                backgroundColor: color\n              }} />\n                  <span className="text-sm">{color}</span>\n                  <button onClick={() => removeColor(color)} className="text-red-500 hover:text-red-700">\n                    ×\n                  </button>\n                </div>)}\n            </div>\n          </div>\n        </div>\n      </div>;\n  }\n}',...ColorPreferenceExample.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);