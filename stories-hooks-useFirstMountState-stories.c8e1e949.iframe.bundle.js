"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[3925],{"./src/hooks/useFirstMountState.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S:()=>useFirstMountState});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function useFirstMountState(){const isFirst=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!0);return isFirst.current?(isFirst.current=!1,!0):isFirst.current}},"./src/stories/hooks/useFirstMountState.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_hooks_useFirstMountState__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/hooks/useFirstMountState.ts"),_themes_shadcn__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const __WEBPACK_DEFAULT_EXPORT__={title:"Hooks/Lifecycle/useFirstMountState",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useFirstMountState` is a hook that returns true only during component\'s first render.\nIt\'s useful for handling logic that should only run on the first mount of a component.\n\n### Module Federation Import\n```tsx\nimport { useFirstMountState } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useFirstMountState } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const isFirstMount = useFirstMountState();\n  return <div>{isFirstMount ? "First Mount!" : "Not First Mount"}</div>;\n};\n```\n\n### Parameters\n```tsx\nuseFirstMountState(): boolean\n```\n\n### Returns\n```tsx\nboolean // true if component is mounting for the first time, false otherwise\n```'}}},tags:["autodocs"],decorators:[Story=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_themes_shadcn__WEBPACK_IMPORTED_MODULE_1__.N,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(Story,null))]},DemoComponent=()=>{const isFirstMount=(0,_hooks_useFirstMountState__WEBPACK_IMPORTED_MODULE_2__.S)(),[renderCount,setRenderCount]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"bg-slate-100 dark:bg-slate-700 p-4 rounded"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Is First Mount?"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("p",{className:"text-lg font-mono mt-1 text-slate-700 dark:text-slate-300"},isFirstMount?"Yes":"No"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400 mt-2"},"Render Count: ",renderCount),react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{onClick:()=>setRenderCount((c=>c+1)),className:"mt-2 px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"},"Force Re-render"))},Example={render:()=>{const[mountCount,setMountCount]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1),[showComponent,setShowComponent]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"w-[400px]"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"space-y-2"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Component Mount State"),showComponent&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(DemoComponent,null)),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"space-y-2"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Mount Controls"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"bg-green-100 dark:bg-green-900/20 p-4 rounded"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("p",{className:"text-sm text-green-600 dark:text-green-400"},"Component Mount Count: ",mountCount),react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{onClick:()=>{setShowComponent(!1),setTimeout((()=>{setShowComponent(!0),setMountCount((c=>c+1))}),500)},className:"mt-2 px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm"},"Unmount & Remount Component"))),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},'Try the different buttons! "Force Re-render" will update state but keep the same mount, while "Unmount & Remount" will create a fresh mount of the component. Notice how isFirstMount is only true/ "Yes" on the first render of each mount! ðŸ”„'))))}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [mountCount, setMountCount] = useState(1);\n    const [showComponent, setShowComponent] = useState(true);\n    return <div className="w-[400px]">\n        <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6">\n          {/* Component Mount State */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Component Mount State\n            </h3>\n            {showComponent && <DemoComponent />}\n          </div>\n\n          {/* Mount Controls */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Mount Controls\n            </h3>\n            <div className="bg-green-100 dark:bg-green-900/20 p-4 rounded">\n              <p className="text-sm text-green-600 dark:text-green-400">\n                Component Mount Count: {mountCount}\n              </p>\n              <button onClick={() => {\n              setShowComponent(false);\n              setTimeout(() => {\n                setShowComponent(true);\n                setMountCount(c => c + 1);\n              }, 500);\n            }} className="mt-2 px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm">\n                Unmount & Remount Component\n              </button>\n            </div>\n          </div>\n\n          {/* Instructions */}\n          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n            <p className="text-sm text-blue-600 dark:text-blue-400">\n              Try the different buttons! "Force Re-render" will update state but\n              keep the same mount, while "Unmount & Remount" will create a fresh\n              mount of the component. Notice how isFirstMount is only true/\n              "Yes" on the first render of each mount! ðŸ”„\n            </p>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);