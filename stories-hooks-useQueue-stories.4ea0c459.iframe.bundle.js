"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[5456],{"./src/stories/hooks/useQueue.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{TaskQueueExample:()=>TaskQueueExample,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useQueue_stories});var react=__webpack_require__("./node_modules/react/index.js");const hooks_useQueue=(initialValue=[])=>{const[state,set]=(0,react.useState)(initialValue);return{add:value=>{set((queue=>[...queue,value]))},remove:()=>{let result;return set((([first,...rest])=>(result=first,rest))),result},get first(){return state[0]},get last(){return state[state.length-1]},get size(){return state.length}}};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useQueue_stories={title:"Hooks/State Management/useQueue",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:"`useQueue` is a hook that manages a FIFO (First-In-First-Out) queue data structure.\nIt's useful for managing ordered data, task queues, or message buffers.\n\n### Module Federation Import\n```tsx\nimport { useQueue } from \"@core/hooks\";\n```\n\n### NPM Package Import\n```tsx\nimport { useQueue } from \"@bernz322/core/hooks\";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const { add, remove, first, last, size, items } = useQueue<string>();\n  const [task, setTask] = useState('');\n\n  return (\n    <div>\n      <div>\n        <input\n          value={task}\n          onChange={(e) => setTask(e.target.value)}\n          placeholder=\"Enter task\"\n        />\n        <button onClick={() => { add(task); setTask(''); }}>Add Task</button>\n        <button onClick={remove}>Complete Task</button>\n      </div>\n      <div>\n        <div>Next task: {first || 'No tasks'}</div>\n        <div>Last added: {last || 'No tasks'}</div>\n        <div>Tasks in queue: {size}</div>\n      </div>\n      <ul>\n        {items.map((item, index) => (\n          <li key={index}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n```\n\n### Advanced Usage\n```tsx\nconst MessageBuffer = () => {\n  const { add, remove, items, clear } = useQueue<{ text: string; time: number }>();\n\n  const addMessage = (text: string) => {\n    add({ text, time: Date.now() });\n    // Auto-remove after 5 seconds\n    setTimeout(remove, 5000);\n  };\n\n  return (\n    <div>\n      <button onClick={() => addMessage('New message')}>Send Message</button>\n      <button onClick={clear}>Clear All</button>\n      <div>\n        {items.map((msg, i) => (\n          <div key={i}>\n            {msg.text} - {new Date(msg.time).toLocaleTimeString()}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseQueue<T>(\n  initialValues?: T[] // Optional initial queue items\n): {\n  add: (item: T) => void;\n  remove: () => T | undefined;\n  clear: () => void;\n  first: T | undefined;\n  last: T | undefined;\n  size: number;\n  items: T[];\n}\n```\n\n### Returns\nAn object containing:\n- add: Function to add an item to the end of the queue\n- remove: Function to remove and return the first item\n- clear: Function to remove all items\n- first: The first item in the queue\n- last: The last item in the queue\n- size: Number of items in the queue\n- items: Array of all items in the queue\n\n### Browser Compatibility\nUses basic JavaScript array operations, supported in all modern browsers."}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},TaskQueueExample={render:()=>{const queue=hooks_useQueue(),[task,setTask]=(0,react.useState)("");return react.createElement("div",{className:"space-y-6 max-w-lg"},react.createElement("div",null,react.createElement("h3",{className:"text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100"},"Task Queue"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-800 p-4 rounded-lg space-y-4"},react.createElement("div",{className:"flex space-x-2"},react.createElement("input",{type:"text",value:task,onChange:e=>setTask(e.target.value),placeholder:"Enter task",className:"px-3 py-2 border rounded-md flex-1"}),react.createElement("button",{onClick:()=>{queue.add(task),setTask("")},className:"px-4 py-2 bg-blue-500 text-white rounded",disabled:!task},"Add"),react.createElement("button",{onClick:queue.remove,className:"px-4 py-2 bg-red-500 text-white rounded",disabled:0===queue.size},"Complete")),react.createElement("div",{className:"space-y-2 text-sm text-slate-600 dark:text-slate-400"},react.createElement("div",null,"Next task: ",queue.first||"No tasks"),react.createElement("div",null,"Last added: ",queue.last||"No tasks"),react.createElement("div",null,"Tasks in queue: ",queue.size)),queue.items?.length>0&&react.createElement("ul",{className:"space-y-1 text-sm text-slate-600 dark:text-slate-400"},queue.items?.map(((item,index)=>react.createElement("li",{key:index},"â€¢ ",item)))),react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},"Try adding tasks to the queue and completing them to see how FIFO (First In, First Out) works! ðŸ“‹")))))}},__namedExportsOrder=["TaskQueueExample"];TaskQueueExample.parameters={...TaskQueueExample.parameters,docs:{...TaskQueueExample.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const queue = useQueue<string>() as QueueMethods<string>;\n    const [task, setTask] = useState("");\n    return <div className="space-y-6 max-w-lg">\n        <div>\n          <h3 className="text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100">\n            Task Queue\n          </h3>\n          <div className="bg-slate-100 dark:bg-slate-800 p-4 rounded-lg space-y-4">\n            <div className="flex space-x-2">\n              <input type="text" value={task} onChange={e => setTask(e.target.value)} placeholder="Enter task" className="px-3 py-2 border rounded-md flex-1" />\n              <button onClick={() => {\n              queue.add(task);\n              setTask("");\n            }} className="px-4 py-2 bg-blue-500 text-white rounded" disabled={!task}>\n                Add\n              </button>\n              <button onClick={queue.remove} className="px-4 py-2 bg-red-500 text-white rounded" disabled={queue.size === 0}>\n                Complete\n              </button>\n            </div>\n            <div className="space-y-2 text-sm text-slate-600 dark:text-slate-400">\n              <div>Next task: {queue.first || "No tasks"}</div>\n              <div>Last added: {queue.last || "No tasks"}</div>\n              <div>Tasks in queue: {queue.size}</div>\n            </div>\n            {queue.items?.length > 0 && <ul className="space-y-1 text-sm text-slate-600 dark:text-slate-400">\n                {queue.items?.map((item: string, index: number) => <li key={index}>â€¢ {item}</li>)}\n              </ul>}\n\n            {/* Instructions */}\n            <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n              <p className="text-sm text-blue-600 dark:text-blue-400">\n                Try adding tasks to the queue and completing them to see how\n                FIFO (First In, First Out) works! ðŸ“‹\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>;\n  }\n}',...TaskQueueExample.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);