"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[6239],{"./src/stories/hooks/useGeolocation.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useGeolocation_stories});var react=__webpack_require__("./node_modules/react/index.js");const hooks_useGeolocation=options=>{const[state,setState]=(0,react.useState)({loading:!0,accuracy:null,altitude:null,altitudeAccuracy:null,heading:null,latitude:null,longitude:null,speed:null,timestamp:Date.now()});let watchId,mounted=!0;const onEvent=event=>{mounted&&setState({loading:!1,accuracy:event.coords.accuracy,altitude:event.coords.altitude,altitudeAccuracy:event.coords.altitudeAccuracy,heading:event.coords.heading,latitude:event.coords.latitude,longitude:event.coords.longitude,speed:event.coords.speed,timestamp:event.timestamp})},onEventError=error=>mounted&&setState((oldState=>({...oldState,loading:!1,error})));return(0,react.useEffect)((()=>(navigator.geolocation.getCurrentPosition(onEvent,onEventError,options),watchId=navigator.geolocation.watchPosition(onEvent,onEventError,options),()=>{mounted=!1,navigator.geolocation.clearWatch(watchId)})),[]),state};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useGeolocation_stories={title:"Hooks/Browser API/useGeolocation",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useGeolocation` is a hook that provides access to the browser\'s Geolocation API.\nIt returns the user\'s current position and updates in real-time.\n\n### Module Federation Import\n```tsx\nimport { useGeolocation } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useGeolocation } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const state = useGeolocation();\n\n  return (\n    <div>\n      {state.loading ? (\n        "Loading..."\n      ) : (\n        <div>\n          Latitude: {state.latitude}\n          Longitude: {state.longitude}\n        </div>\n      )}\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseGeolocation(\n  options?: PositionOptions // Optional configuration for the geolocation request\n): GeoLocationSensorState\n```\n\n### Returns\n```tsx\n{\n  loading: boolean;\n  accuracy: number | null;\n  altitude: number | null;\n  altitudeAccuracy: number | null;\n  heading: number | null;\n  latitude: number | null;\n  longitude: number | null;\n  speed: number | null;\n  timestamp: number | null;\n  error?: Error | IGeolocationPositionError;\n}\n```\n\n### Browser Compatibility\nUses the Geolocation API:\n- navigator.geolocation\n- getCurrentPosition\n- watchPosition\nSupported in all modern browsers.\n\n### Related Resources\n- [MDN: Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API)\n- [MDN: Using the Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API)'}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},Example={render:()=>{const state=hooks_useGeolocation({enableHighAccuracy:!0,maximumAge:0,timeout:5e3}),formatCoordinate=value=>null===value?"N/A":value.toFixed(6);return react.createElement("div",{className:"w-[400px]"},react.createElement("div",{className:"bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6"},state.loading&&react.createElement("div",{className:"bg-blue-100 dark:bg-blue-900/20 p-4 rounded text-center"},react.createElement("p",{className:"text-blue-600 dark:text-blue-400"},"Requesting location access...")),state.error&&react.createElement("div",{className:"bg-red-100 dark:bg-red-900/20 p-4 rounded"},react.createElement("h3",{className:"text-lg font-semibold text-red-600 dark:text-red-400"},"Error"),react.createElement("p",{className:"text-sm text-red-500 dark:text-red-300"},state.error.message)),!state.loading&&!state.error&&react.createElement(react.Fragment,null,react.createElement("div",{className:"space-y-2"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Primary Coordinates"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-700 p-4 rounded grid grid-cols-2 gap-4"},react.createElement("div",null,react.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Latitude"),react.createElement("p",{className:"text-lg font-mono text-slate-700 dark:text-slate-300"},formatCoordinate(state.latitude))),react.createElement("div",null,react.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Longitude"),react.createElement("p",{className:"text-lg font-mono text-slate-700 dark:text-slate-300"},formatCoordinate(state.longitude))))),react.createElement("div",{className:"space-y-2"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Additional Data"),react.createElement("div",{className:"bg-green-100 dark:bg-green-900/20 p-4 rounded space-y-3"},react.createElement("div",null,react.createElement("p",{className:"text-sm text-green-600 dark:text-green-400"},"Accuracy"),react.createElement("p",{className:"text-lg font-mono text-green-700 dark:text-green-300"},state.accuracy?`±${state.accuracy.toFixed(2)}m`:"N/A")),react.createElement("div",null,react.createElement("p",{className:"text-sm text-green-600 dark:text-green-400"},"Altitude"),react.createElement("p",{className:"text-lg font-mono text-green-700 dark:text-green-300"},state.altitude?`${state.altitude.toFixed(2)}m`:"N/A")),react.createElement("div",null,react.createElement("p",{className:"text-sm text-green-600 dark:text-green-400"},"Speed"),react.createElement("p",{className:"text-lg font-mono text-green-700 dark:text-green-300"},null===(value=state.speed)?"N/A":`${(3.6*value).toFixed(2)} km/h`)))),react.createElement("div",{className:"space-y-2"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Last Update"),react.createElement("div",{className:"bg-purple-100 dark:bg-purple-900/20 p-4 rounded"},react.createElement("p",{className:"text-sm text-purple-600 dark:text-purple-400"},"Timestamp"),react.createElement("p",{className:"text-lg font-mono text-purple-700 dark:text-purple-300"},(value=>null===value?"N/A":new Date(value).toLocaleString())(state.timestamp))))),react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},"Allow location access to see your current position! The hook will continuously update your location data in real-time. Try moving around to see the values change! 📍"))));var value}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const state = useGeolocation({\n      enableHighAccuracy: true,\n      maximumAge: 0,\n      timeout: 5000\n    });\n    const formatCoordinate = (value: number | null): string => {\n      if (value === null) return "N/A";\n      return value.toFixed(6);\n    };\n    const formatSpeed = (value: number | null): string => {\n      if (value === null) return "N/A";\n      return `${(value * 3.6).toFixed(2)} km/h`; // Convert m/s to km/h\n    };\n    const formatTimestamp = (value: number | null): string => {\n      if (value === null) return "N/A";\n      return new Date(value).toLocaleString();\n    };\n    return <div className="w-[400px]">\n        <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6">\n          {/* Loading State */}\n          {state.loading && <div className="bg-blue-100 dark:bg-blue-900/20 p-4 rounded text-center">\n              <p className="text-blue-600 dark:text-blue-400">\n                Requesting location access...\n              </p>\n            </div>}\n\n          {/* Error State */}\n          {state.error && <div className="bg-red-100 dark:bg-red-900/20 p-4 rounded">\n              <h3 className="text-lg font-semibold text-red-600 dark:text-red-400">\n                Error\n              </h3>\n              <p className="text-sm text-red-500 dark:text-red-300">\n                {state.error.message}\n              </p>\n            </div>}\n\n          {/* Location Data */}\n          {!state.loading && !state.error && <>\n              {/* Primary Coordinates */}\n              <div className="space-y-2">\n                <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n                  Primary Coordinates\n                </h3>\n                <div className="bg-slate-100 dark:bg-slate-700 p-4 rounded grid grid-cols-2 gap-4">\n                  <div>\n                    <p className="text-sm text-slate-500 dark:text-slate-400">\n                      Latitude\n                    </p>\n                    <p className="text-lg font-mono text-slate-700 dark:text-slate-300">\n                      {formatCoordinate(state.latitude)}\n                    </p>\n                  </div>\n                  <div>\n                    <p className="text-sm text-slate-500 dark:text-slate-400">\n                      Longitude\n                    </p>\n                    <p className="text-lg font-mono text-slate-700 dark:text-slate-300">\n                      {formatCoordinate(state.longitude)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Additional Data */}\n              <div className="space-y-2">\n                <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n                  Additional Data\n                </h3>\n                <div className="bg-green-100 dark:bg-green-900/20 p-4 rounded space-y-3">\n                  <div>\n                    <p className="text-sm text-green-600 dark:text-green-400">\n                      Accuracy\n                    </p>\n                    <p className="text-lg font-mono text-green-700 dark:text-green-300">\n                      {state.accuracy ? `±${state.accuracy.toFixed(2)}m` : "N/A"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className="text-sm text-green-600 dark:text-green-400">\n                      Altitude\n                    </p>\n                    <p className="text-lg font-mono text-green-700 dark:text-green-300">\n                      {state.altitude ? `${state.altitude.toFixed(2)}m` : "N/A"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className="text-sm text-green-600 dark:text-green-400">\n                      Speed\n                    </p>\n                    <p className="text-lg font-mono text-green-700 dark:text-green-300">\n                      {formatSpeed(state.speed)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Timestamp */}\n              <div className="space-y-2">\n                <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n                  Last Update\n                </h3>\n                <div className="bg-purple-100 dark:bg-purple-900/20 p-4 rounded">\n                  <p className="text-sm text-purple-600 dark:text-purple-400">\n                    Timestamp\n                  </p>\n                  <p className="text-lg font-mono text-purple-700 dark:text-purple-300">\n                    {formatTimestamp(state.timestamp)}\n                  </p>\n                </div>\n              </div>\n            </>}\n\n          {/* Instructions */}\n          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n            <p className="text-sm text-blue-600 dark:text-blue-400">\n              Allow location access to see your current position! The hook will\n              continuously update your location data in real-time. Try moving\n              around to see the values change! 📍\n            </p>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);