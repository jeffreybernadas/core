/*! For license information please see stories-hooks-useInterval-stories.742f6d9d.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[2048],{"./node_modules/react/cjs/react-jsx-runtime.production.js":(__unused_webpack_module,exports)=>{var REACT_ELEMENT_TYPE=Symbol.for("react.transitional.element"),REACT_FRAGMENT_TYPE=Symbol.for("react.fragment");function jsxProd(type,config,maybeKey){var key=null;if(void 0!==maybeKey&&(key=""+maybeKey),void 0!==config.key&&(key=""+config.key),"key"in config)for(var propName in maybeKey={},config)"key"!==propName&&(maybeKey[propName]=config[propName]);else maybeKey=config;return config=maybeKey.ref,{$$typeof:REACT_ELEMENT_TYPE,type,key,ref:void 0!==config?config:null,props:maybeKey}}exports.Fragment=REACT_FRAGMENT_TYPE,exports.jsx=jsxProd,exports.jsxs=jsxProd},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.js")},"./src/stories/hooks/useInterval.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useInterval_stories});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js");const hooks_useInterval=(fn,interval,{autoInvoke=!1}={})=>{const[active,setActive]=(0,react.useState)(!1),intervalRef=(0,react.useRef)(null),fnRef=(0,react.useRef)(null),start=()=>{setActive((old=>(old||intervalRef.current&&-1!==intervalRef.current||(intervalRef.current=window.setInterval(fnRef.current,interval)),!0)))},stop=()=>{setActive(!1),window.clearInterval(intervalRef.current??-1),intervalRef.current=-1};return(0,react.useEffect)((()=>(fnRef.current=fn,active&&start(),stop)),[fn,active,interval]),(0,react.useEffect)((()=>{autoInvoke&&start()}),[]),{start,stop,toggle:()=>{active?stop():start()},active}};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useInterval_stories={title:"Hooks/Utility/useInterval",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useInterval` is a hook that provides a declarative way to handle setInterval with automatic cleanup.\nIt\'s useful for creating timers, animations, or any recurring task with a fixed time interval.\n\n### Module Federation Import\n```tsx\nimport { useInterval } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useInterval } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const [count, setCount] = useState(0);\n  const { start, stop } = useInterval(\n    () => setCount(c => c + 1),\n    1000\n  );\n\n  return (\n    <div>\n      Count: {count}\n      <button onClick={start}>Start</button>\n      <button onClick={stop}>Stop</button>\n    </div>\n  );\n};\n```\n\n### Advanced Usage\n```tsx\nconst AutoStartTimer = () => {\n  const [time, setTime] = useState(new Date());\n  useInterval(\n    () => setTime(new Date()),\n    1000,\n    { autoInvoke: true }\n  );\n\n  return <div>Current time: {time.toLocaleTimeString()}</div>;\n};\n```\n\n### Parameters\n```tsx\nfn: () => void // Function to be called at each interval\ninterval: number // Interval duration in milliseconds\noptions?: {\n  autoInvoke?: boolean // Start interval automatically on mount\n}\n```\n\n### Returns\n```tsx\n{\n  start: () => void // Start the interval\n  stop: () => void // Stop the interval\n  toggle: () => void // Toggle between start and stop\n  active: boolean // Current interval state\n}\n```\n\n### Browser Compatibility\nUses standard Web APIs:\n- setInterval\n- clearInterval\nSupported in all modern browsers.\n\n### Related Resources\n- [MDN: setInterval](https://developer.mozilla.org/en-US/docs/Web/API/setInterval)\n- [MDN: clearInterval](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval)'}}},tags:["autodocs"],decorators:[Story=>(0,jsx_runtime.jsx)(ThemeProvider.N,{children:(0,jsx_runtime.jsx)(Story,{})})]},Example={render:()=>{const[count,setCount]=(0,react.useState)(0),{start:startCounter,stop:stopCounter,active:counterActive}=hooks_useInterval((()=>setCount((c=>c+1))),1e3),[hue,setHue]=(0,react.useState)(0),{start:startColor,stop:stopColor,active:colorActive}=hooks_useInterval((()=>setHue((h=>(h+1)%360))),50),[time,setTime]=(0,react.useState)(new Date);hooks_useInterval((()=>setTime(new Date)),1e3,{autoInvoke:!0});const[progress,setProgress]=(0,react.useState)(0),{start:startProgress,stop:stopProgress,active:progressActive}=hooks_useInterval((()=>setProgress((p=>p>=100?0:p+1))),50);return(0,jsx_runtime.jsx)("div",{className:"w-[400px]",children:(0,jsx_runtime.jsxs)("div",{className:"bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6",children:[(0,jsx_runtime.jsxs)("div",{className:"space-y-2",children:[(0,jsx_runtime.jsx)("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100",children:"Basic Counter"}),(0,jsx_runtime.jsxs)("div",{className:"flex items-center justify-between bg-slate-100 dark:bg-slate-700 p-4 rounded",children:[(0,jsx_runtime.jsx)("div",{className:"text-2xl font-mono text-slate-700 dark:text-slate-300",children:count}),(0,jsx_runtime.jsx)("div",{className:"space-x-2",children:(0,jsx_runtime.jsx)("button",{onClick:counterActive?stopCounter:startCounter,className:`px-4 py-2 rounded ${counterActive?"bg-red-500 hover:bg-red-600":"bg-green-500 hover:bg-green-600"} text-white transition-colors`,children:counterActive?"Stop":"Start"})})]})]}),(0,jsx_runtime.jsxs)("div",{className:"space-y-2",children:[(0,jsx_runtime.jsx)("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100",children:"Color Cycle"}),(0,jsx_runtime.jsx)("div",{className:"h-16 rounded transition-colors cursor-pointer",style:{backgroundColor:`hsl(${hue}, 70%, 50%)`},onClick:colorActive?stopColor:startColor,children:(0,jsx_runtime.jsx)("div",{className:"h-full flex items-center justify-center text-white font-medium",children:colorActive?"Click to Stop":"Click to Start"})})]}),(0,jsx_runtime.jsxs)("div",{className:"space-y-2",children:[(0,jsx_runtime.jsx)("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100",children:"Auto-starting Clock"}),(0,jsx_runtime.jsxs)("div",{className:"bg-slate-100 dark:bg-slate-700 p-4 rounded text-center",children:[(0,jsx_runtime.jsx)("div",{className:"text-2xl font-mono text-slate-700 dark:text-slate-300",children:time.toLocaleTimeString()}),(0,jsx_runtime.jsx)("div",{className:"text-xs text-slate-500 dark:text-slate-400 mt-1",children:"Updates automatically"})]})]}),(0,jsx_runtime.jsxs)("div",{className:"space-y-2",children:[(0,jsx_runtime.jsx)("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100",children:"Progress Bar"}),(0,jsx_runtime.jsxs)("div",{className:"space-y-2",children:[(0,jsx_runtime.jsx)("div",{className:"h-4 bg-slate-200 dark:bg-slate-700 rounded overflow-hidden",children:(0,jsx_runtime.jsx)("div",{className:"h-full bg-blue-500 transition-all duration-100",style:{width:`${progress}%`}})}),(0,jsx_runtime.jsxs)("div",{className:"flex justify-between items-center",children:[(0,jsx_runtime.jsxs)("span",{className:"text-sm text-slate-600 dark:text-slate-400",children:[progress,"%"]}),(0,jsx_runtime.jsx)("button",{onClick:progressActive?stopProgress:startProgress,className:`px-3 py-1 rounded text-sm ${progressActive?"bg-red-500 hover:bg-red-600":"bg-blue-500 hover:bg-blue-600"} text-white transition-colors`,children:progressActive?"Stop":"Start"})]})]})]}),(0,jsx_runtime.jsx)("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded",children:(0,jsx_runtime.jsx)("p",{className:"text-sm text-blue-600 dark:text-blue-400",children:"Try each example! Start/stop the counter, watch the color cycle, check the auto-updating clock, and control the progress bar. Each demonstrates a different way to use intervals! ⏱️"})})]})})}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // Counter example\n    const [count, setCount] = useState(0);\n    const {\n      start: startCounter,\n      stop: stopCounter,\n      active: counterActive\n    } = useInterval(() => setCount(c => c + 1), 1000);\n\n    // Color cycle example\n    const [hue, setHue] = useState(0);\n    const {\n      start: startColor,\n      stop: stopColor,\n      active: colorActive\n    } = useInterval(() => setHue(h => (h + 1) % 360), 50);\n\n    // Digital clock example\n    const [time, setTime] = useState(new Date());\n    useInterval(() => setTime(new Date()), 1000, {\n      autoInvoke: true\n    });\n\n    // Progress bar example\n    const [progress, setProgress] = useState(0);\n    const {\n      start: startProgress,\n      stop: stopProgress,\n      active: progressActive\n    } = useInterval(() => setProgress(p => p >= 100 ? 0 : p + 1), 50);\n    return <div className="w-[400px]">\n        <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6">\n          {/* Counter Example */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Basic Counter\n            </h3>\n            <div className="flex items-center justify-between bg-slate-100 dark:bg-slate-700 p-4 rounded">\n              <div className="text-2xl font-mono text-slate-700 dark:text-slate-300">\n                {count}\n              </div>\n              <div className="space-x-2">\n                <button onClick={counterActive ? stopCounter : startCounter} className={`px-4 py-2 rounded ${counterActive ? "bg-red-500 hover:bg-red-600" : "bg-green-500 hover:bg-green-600"} text-white transition-colors`}>\n                  {counterActive ? "Stop" : "Start"}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Color Cycle Example */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Color Cycle\n            </h3>\n            <div className="h-16 rounded transition-colors cursor-pointer" style={{\n            backgroundColor: `hsl(${hue}, 70%, 50%)`\n          }} onClick={colorActive ? stopColor : startColor}>\n              <div className="h-full flex items-center justify-center text-white font-medium">\n                {colorActive ? "Click to Stop" : "Click to Start"}\n              </div>\n            </div>\n          </div>\n\n          {/* Digital Clock Example */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Auto-starting Clock\n            </h3>\n            <div className="bg-slate-100 dark:bg-slate-700 p-4 rounded text-center">\n              <div className="text-2xl font-mono text-slate-700 dark:text-slate-300">\n                {time.toLocaleTimeString()}\n              </div>\n              <div className="text-xs text-slate-500 dark:text-slate-400 mt-1">\n                Updates automatically\n              </div>\n            </div>\n          </div>\n\n          {/* Progress Bar Example */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Progress Bar\n            </h3>\n            <div className="space-y-2">\n              <div className="h-4 bg-slate-200 dark:bg-slate-700 rounded overflow-hidden">\n                <div className="h-full bg-blue-500 transition-all duration-100" style={{\n                width: `${progress}%`\n              }} />\n              </div>\n              <div className="flex justify-between items-center">\n                <span className="text-sm text-slate-600 dark:text-slate-400">\n                  {progress}%\n                </span>\n                <button onClick={progressActive ? stopProgress : startProgress} className={`px-3 py-1 rounded text-sm ${progressActive ? "bg-red-500 hover:bg-red-600" : "bg-blue-500 hover:bg-blue-600"} text-white transition-colors`}>\n                  {progressActive ? "Stop" : "Start"}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Instructions */}\n          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n            <p className="text-sm text-blue-600 dark:text-blue-400">\n              Try each example! Start/stop the counter, watch the color cycle,\n              check the auto-updating clock, and control the progress bar. Each\n              demonstrates a different way to use intervals! ⏱️\n            </p>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThemeProviderContext.Provider,{...props,value,children})}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);