"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[2078],{"./src/components/shadcn/button.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>Button,r:()=>buttonVariants});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@radix-ui/react-slot/dist/index.mjs"),class_variance_authority__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/class-variance-authority/dist/index.mjs"),_lib__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/lib/utils.ts");const buttonVariants=(0,class_variance_authority__WEBPACK_IMPORTED_MODULE_1__.F)("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",{variants:{variant:{default:"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",destructive:"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",outline:"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-9 px-4 py-2 has-[>svg]:px-3",sm:"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",lg:"h-10 rounded-md px-6 has-[>svg]:px-4",icon:"size-9"}},defaultVariants:{variant:"default",size:"default"}});function Button({className,variant,size,asChild=!1,...props}){const Comp=asChild?_radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_2__.DX:"button";return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Comp,{"data-slot":"button",className:(0,_lib__WEBPACK_IMPORTED_MODULE_3__.cn)(buttonVariants({variant,size,className})),...props})}Button.__docgenInfo={description:"",methods:[],displayName:"Button",props:{asChild:{required:!1,tsType:{name:"boolean"},description:"",defaultValue:{value:"false",computed:!1}}}}},"./src/components/shadcn/label.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{J:()=>Label});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_radix_ui_react_label__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@radix-ui/react-label/dist/index.mjs"),_lib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/lib/utils.ts");function Label({className,...props}){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_label__WEBPACK_IMPORTED_MODULE_1__.b,{"data-slot":"label",className:(0,_lib__WEBPACK_IMPORTED_MODULE_2__.cn)("flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",className),...props})}Label.__docgenInfo={description:"",methods:[],displayName:"Label"}},"./src/lib/utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{cn:()=>cn});var clsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),tailwind_merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tailwind-merge/dist/bundle-mjs.mjs");const cn=(...inputs)=>(0,tailwind_merge__WEBPACK_IMPORTED_MODULE_0__.QP)((0,clsx__WEBPACK_IMPORTED_MODULE_1__.$)(inputs))},"./src/stories/components/shadcn/input-otp.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,DifferentLengths:()=>DifferentLengths,Pattern:()=>Pattern,Separators:()=>Separators,WithPaste:()=>WithPaste,WithValidation:()=>WithValidation,__namedExportsOrder:()=>__namedExportsOrder,default:()=>input_otp_stories});var react=__webpack_require__("./node_modules/react/index.js"),dist=__webpack_require__("./node_modules/input-otp/dist/index.mjs"),utils=(__webpack_require__("./node_modules/lucide-react/dist/esm/icons/minus.js"),__webpack_require__("./src/lib/utils.ts"));function InputOTP({className,containerClassName,...props}){return react.createElement(dist.wE,{"data-slot":"input-otp",containerClassName:(0,utils.cn)("flex items-center gap-2 has-disabled:opacity-50",containerClassName),className:(0,utils.cn)("disabled:cursor-not-allowed",className),...props})}function InputOTPGroup({className,...props}){return react.createElement("div",{"data-slot":"input-otp-group",className:(0,utils.cn)("flex items-center",className),...props})}function InputOTPSlot({index,className,...props}){const inputOTPContext=react.useContext(dist.dK),{char,hasFakeCaret,isActive}=inputOTPContext?.slots[index]??{};return react.createElement("div",{"data-slot":"input-otp-slot","data-active":isActive,className:(0,utils.cn)("border-black dark:border-white data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]",className),...props},char,hasFakeCaret&&react.createElement("div",{className:"pointer-events-none absolute inset-0 flex items-center justify-center"},react.createElement("div",{className:"animate-caret-blink bg-foreground h-4 w-px duration-1000"})))}InputOTP.__docgenInfo={description:"",methods:[],displayName:"InputOTP",props:{containerClassName:{required:!1,tsType:{name:"string"},description:""}}},InputOTPGroup.__docgenInfo={description:"",methods:[],displayName:"InputOTPGroup"},InputOTPSlot.__docgenInfo={description:"",methods:[],displayName:"InputOTPSlot",props:{index:{required:!0,tsType:{name:"number"},description:""}}};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx"),shadcn_button=__webpack_require__("./src/components/shadcn/button.tsx"),label=__webpack_require__("./src/components/shadcn/label.tsx"),check=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/check.js"),copy=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/copy.js");const input_otp_stories={title:"Components/Shadcn/InputOTP",component:InputOTP,parameters:{layout:"centered",docs:{description:{component:"Accessible one-time password component with copy paste functionality.\n\nSee the [Shadcn docs](https://ui.shadcn.com/docs/components/input-otp) for more information."}}},tags:["autodocs","stable","version:2.3.0"],argTypes:{children:{control:!1,description:"The content to display inside the input OTP",table:{type:{summary:"React.ReactNode"}}},id:{control:"text",description:"The id of the input OTP",table:{type:{summary:"string"}}},maxLength:{control:"number",description:"The maximum length of the input OTP",table:{type:{summary:"number"}}},value:{control:"text",description:"The value of the input OTP",table:{type:{summary:"string"}}},onChange:{control:!1,description:"The onChange event of the input OTP",table:{type:{summary:"function"}}},pattern:{control:"text",description:"The pattern of the input OTP",table:{type:{summary:"string"}}},containerClassName:{control:"text",description:"The container class name of the input OTP",table:{type:{summary:"string"}}},className:{control:"text",description:"The class name of the input OTP",table:{type:{summary:"string"}}}},decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement("div",{className:"w-full max-w-md"},react.createElement(Story,null)))]},Default={args:{id:"otp",maxLength:6,value:"",onChange:()=>{}},render:args=>{const[value,setValue]=(0,react.useState)("");return react.createElement("div",{className:"space-y-2"},react.createElement(label.J,{htmlFor:"otp"},"Enter verification code"),react.createElement(InputOTP,{id:"otp",value,onChange:value=>setValue(value),...args},react.createElement(InputOTPGroup,null,react.createElement(InputOTPSlot,{index:0}),react.createElement(InputOTPSlot,{index:1}),react.createElement(InputOTPSlot,{index:2}),react.createElement(InputOTPSlot,{index:3}),react.createElement(InputOTPSlot,{index:4}),react.createElement(InputOTPSlot,{index:5}))),react.createElement("p",{className:"text-sm text-muted-foreground"},"Please enter the 6-digit code sent to your device."))}},DifferentLengths={render:function DifferentLengthsOTP(){const[value4,setValue4]=(0,react.useState)(""),[value6,setValue6]=(0,react.useState)(""),[value8,setValue8]=(0,react.useState)("");return react.createElement("div",{className:"space-y-8"},react.createElement("div",{className:"space-y-2"},react.createElement(label.J,{htmlFor:"otp-4"},"4-digit code"),react.createElement(InputOTP,{id:"otp-4",maxLength:4,value:value4,onChange:value=>setValue4(value)},react.createElement(InputOTPGroup,null,react.createElement(InputOTPSlot,{index:0}),react.createElement(InputOTPSlot,{index:1}),react.createElement(InputOTPSlot,{index:2}),react.createElement(InputOTPSlot,{index:3})))),react.createElement("div",{className:"space-y-2"},react.createElement(label.J,{htmlFor:"otp-6"},"6-digit code"),react.createElement(InputOTP,{id:"otp-6",maxLength:6,value:value6,onChange:value=>setValue6(value)},react.createElement(InputOTPGroup,null,react.createElement(InputOTPSlot,{index:0}),react.createElement(InputOTPSlot,{index:1}),react.createElement(InputOTPSlot,{index:2}),react.createElement(InputOTPSlot,{index:3}),react.createElement(InputOTPSlot,{index:4}),react.createElement(InputOTPSlot,{index:5})))),react.createElement("div",{className:"space-y-2"},react.createElement(label.J,{htmlFor:"otp-8"},"8-digit code"),react.createElement(InputOTP,{id:"otp-8",maxLength:8,value:value8,onChange:value=>setValue8(value)},react.createElement(InputOTPGroup,null,react.createElement(InputOTPSlot,{index:0}),react.createElement(InputOTPSlot,{index:1}),react.createElement(InputOTPSlot,{index:2}),react.createElement(InputOTPSlot,{index:3}),react.createElement(InputOTPSlot,{index:4}),react.createElement(InputOTPSlot,{index:5}),react.createElement(InputOTPSlot,{index:6}),react.createElement(InputOTPSlot,{index:7})))))}},Separators={render:function SeparatorsOTP(){const[value,setValue]=(0,react.useState)("");return react.createElement("div",{className:"space-y-4"},react.createElement("h3",{className:"text-sm font-medium"},"With Separators"),react.createElement(InputOTP,{maxLength:4,value,onChange:value=>setValue(value)},react.createElement(InputOTPGroup,{className:"gap-2"},react.createElement(InputOTPSlot,{index:0}),react.createElement("span",{className:"text-muted-foreground"},"-"),react.createElement(InputOTPSlot,{index:1}),react.createElement("span",{className:"text-muted-foreground"},"-"),react.createElement(InputOTPSlot,{index:2}),react.createElement("span",{className:"text-muted-foreground"},"-"),react.createElement(InputOTPSlot,{index:3}))))}},Pattern={render:function PatternOTP(){const[value,setValue]=(0,react.useState)("");return react.createElement("div",{className:"space-y-4"},react.createElement("h3",{className:"text-sm font-medium"},"Credit Card Pattern"),react.createElement(InputOTP,{maxLength:16,pattern:"[0-9]*",value,onChange:value=>setValue(value)},react.createElement(InputOTPGroup,{className:"gap-2"},react.createElement("div",{className:"flex gap-1"},react.createElement(InputOTPSlot,{index:0}),react.createElement(InputOTPSlot,{index:1}),react.createElement(InputOTPSlot,{index:2}),react.createElement(InputOTPSlot,{index:3})),react.createElement("div",{className:"flex gap-1"},react.createElement(InputOTPSlot,{index:4}),react.createElement(InputOTPSlot,{index:5}),react.createElement(InputOTPSlot,{index:6}),react.createElement(InputOTPSlot,{index:7})),react.createElement("div",{className:"flex gap-1"},react.createElement(InputOTPSlot,{index:8}),react.createElement(InputOTPSlot,{index:9}),react.createElement(InputOTPSlot,{index:10}),react.createElement(InputOTPSlot,{index:11})),react.createElement("div",{className:"flex gap-1"},react.createElement(InputOTPSlot,{index:12}),react.createElement(InputOTPSlot,{index:13}),react.createElement(InputOTPSlot,{index:14}),react.createElement(InputOTPSlot,{index:15})))))}},WithValidation={render:function ValidationOTP(){const[value,setValue]=(0,react.useState)(""),[isValid,setIsValid]=(0,react.useState)(null);return react.createElement("div",{className:"space-y-4"},react.createElement("div",{className:"space-y-2"},react.createElement(label.J,{htmlFor:"otp-validation"},"Enter verification code"),react.createElement(InputOTP,{id:"otp-validation",maxLength:6,value,onChange:value=>{setValue(value),setIsValid(null)}},react.createElement(InputOTPGroup,null,react.createElement(InputOTPSlot,{index:0}),react.createElement(InputOTPSlot,{index:1}),react.createElement(InputOTPSlot,{index:2}),react.createElement(InputOTPSlot,{index:3}),react.createElement(InputOTPSlot,{index:4}),react.createElement(InputOTPSlot,{index:5}))),!0===isValid&&react.createElement("p",{className:"text-sm text-green-500 flex items-center"},react.createElement(check.A,{className:"mr-1 h-4 w-4"})," Code is correct"),!1===isValid&&react.createElement("p",{className:"text-sm text-destructive"},"Invalid code. Try again."),react.createElement("p",{className:"text-sm text-muted-foreground"},"Hint: The correct code is ","123456")),react.createElement("div",{className:"flex gap-2"},react.createElement(shadcn_button.$,{onClick:()=>{setIsValid("123456"===value)},disabled:6!==value.length},"Verify"),react.createElement(shadcn_button.$,{variant:"outline",onClick:()=>{setValue(""),setIsValid(null)}},"Reset")))}},WithPaste={render:function PasteOTP(){const[value,setValue]=(0,react.useState)(""),[copied,setCopied]=(0,react.useState)(!1);return react.createElement("div",{className:"space-y-4"},react.createElement("div",{className:"space-y-2"},react.createElement("div",{className:"flex justify-between items-center"},react.createElement(label.J,{htmlFor:"otp-paste"},"Enter verification code"),react.createElement(shadcn_button.$,{variant:"outline",size:"sm",className:"h-8 gap-1",onClick:async()=>{try{await navigator.clipboard.writeText("987654"),setCopied(!0),setTimeout((()=>setCopied(!1)),2e3)}catch(err){console.error("Failed to copy text: ",err)}}},copied?react.createElement(react.Fragment,null,react.createElement(check.A,{className:"h-3.5 w-3.5"}),"Copied!"):react.createElement(react.Fragment,null,react.createElement(copy.A,{className:"h-3.5 w-3.5"}),"Copy sample"))),react.createElement(InputOTP,{id:"otp-paste",maxLength:6,value,onChange:value=>setValue(value)},react.createElement(InputOTPGroup,null,react.createElement(InputOTPSlot,{index:0}),react.createElement(InputOTPSlot,{index:1}),react.createElement(InputOTPSlot,{index:2}),react.createElement(InputOTPSlot,{index:3}),react.createElement(InputOTPSlot,{index:4}),react.createElement(InputOTPSlot,{index:5}))),react.createElement("p",{className:"text-sm text-muted-foreground"},'Click "Copy sample" and then paste (Ctrl+V/Cmd+V) into the input.')))}},__namedExportsOrder=["Default","DifferentLengths","Separators","Pattern","WithValidation","WithPaste"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "otp",\n    maxLength: 6,\n    value: "",\n    onChange: () => {}\n  },\n  render: args => {\n    const [value, setValue] = useState("");\n    return <div className="space-y-2">\n        <Label htmlFor="otp">Enter verification code</Label>\n        {/* @ts-expect-error - type errors for args */}\n        <InputOTP id="otp" value={value} onChange={value => setValue(value)} {...args}>\n          <InputOTPGroup>\n            <InputOTPSlot index={0} />\n            <InputOTPSlot index={1} />\n            <InputOTPSlot index={2} />\n            <InputOTPSlot index={3} />\n            <InputOTPSlot index={4} />\n            <InputOTPSlot index={5} />\n          </InputOTPGroup>\n        </InputOTP>\n        <p className="text-sm text-muted-foreground">\n          Please enter the 6-digit code sent to your device.\n        </p>\n      </div>;\n  }\n}',...Default.parameters?.docs?.source},description:{story:"Default OTP input with 6 digits.",...Default.parameters?.docs?.description}}},DifferentLengths.parameters={...DifferentLengths.parameters,docs:{...DifferentLengths.parameters?.docs,source:{originalSource:'{\n  render: function DifferentLengthsOTP() {\n    const [value4, setValue4] = useState("");\n    const [value6, setValue6] = useState("");\n    const [value8, setValue8] = useState("");\n    return <div className="space-y-8">\n        <div className="space-y-2">\n          <Label htmlFor="otp-4">4-digit code</Label>\n          <InputOTP id="otp-4" maxLength={4} value={value4} onChange={value => setValue4(value)}>\n            <InputOTPGroup>\n              <InputOTPSlot index={0} />\n              <InputOTPSlot index={1} />\n              <InputOTPSlot index={2} />\n              <InputOTPSlot index={3} />\n            </InputOTPGroup>\n          </InputOTP>\n        </div>\n\n        <div className="space-y-2">\n          <Label htmlFor="otp-6">6-digit code</Label>\n          <InputOTP id="otp-6" maxLength={6} value={value6} onChange={value => setValue6(value)}>\n            <InputOTPGroup>\n              <InputOTPSlot index={0} />\n              <InputOTPSlot index={1} />\n              <InputOTPSlot index={2} />\n              <InputOTPSlot index={3} />\n              <InputOTPSlot index={4} />\n              <InputOTPSlot index={5} />\n            </InputOTPGroup>\n          </InputOTP>\n        </div>\n\n        <div className="space-y-2">\n          <Label htmlFor="otp-8">8-digit code</Label>\n          <InputOTP id="otp-8" maxLength={8} value={value8} onChange={value => setValue8(value)}>\n            <InputOTPGroup>\n              <InputOTPSlot index={0} />\n              <InputOTPSlot index={1} />\n              <InputOTPSlot index={2} />\n              <InputOTPSlot index={3} />\n              <InputOTPSlot index={4} />\n              <InputOTPSlot index={5} />\n              <InputOTPSlot index={6} />\n              <InputOTPSlot index={7} />\n            </InputOTPGroup>\n          </InputOTP>\n        </div>\n      </div>;\n  }\n}',...DifferentLengths.parameters?.docs?.source},description:{story:"OTP input with different lengths.",...DifferentLengths.parameters?.docs?.description}}},Separators.parameters={...Separators.parameters,docs:{...Separators.parameters?.docs,source:{originalSource:'{\n  render: function SeparatorsOTP() {\n    const [value, setValue] = useState("");\n    return <div className="space-y-4">\n        <h3 className="text-sm font-medium">With Separators</h3>\n        <InputOTP maxLength={4} value={value} onChange={value => setValue(value)}>\n          <InputOTPGroup className="gap-2">\n            <InputOTPSlot index={0} />\n            <span className="text-muted-foreground">-</span>\n            <InputOTPSlot index={1} />\n            <span className="text-muted-foreground">-</span>\n            <InputOTPSlot index={2} />\n            <span className="text-muted-foreground">-</span>\n            <InputOTPSlot index={3} />\n          </InputOTPGroup>\n        </InputOTP>\n      </div>;\n  }\n}',...Separators.parameters?.docs?.source},description:{story:"OTP input with separators.",...Separators.parameters?.docs?.description}}},Pattern.parameters={...Pattern.parameters,docs:{...Pattern.parameters?.docs,source:{originalSource:'{\n  render: function PatternOTP() {\n    const [value, setValue] = useState("");\n    return <div className="space-y-4">\n        <h3 className="text-sm font-medium">Credit Card Pattern</h3>\n        <InputOTP maxLength={16} pattern="[0-9]*" value={value} onChange={value => setValue(value)}>\n          <InputOTPGroup className="gap-2">\n            <div className="flex gap-1">\n              <InputOTPSlot index={0} />\n              <InputOTPSlot index={1} />\n              <InputOTPSlot index={2} />\n              <InputOTPSlot index={3} />\n            </div>\n            <div className="flex gap-1">\n              <InputOTPSlot index={4} />\n              <InputOTPSlot index={5} />\n              <InputOTPSlot index={6} />\n              <InputOTPSlot index={7} />\n            </div>\n            <div className="flex gap-1">\n              <InputOTPSlot index={8} />\n              <InputOTPSlot index={9} />\n              <InputOTPSlot index={10} />\n              <InputOTPSlot index={11} />\n            </div>\n            <div className="flex gap-1">\n              <InputOTPSlot index={12} />\n              <InputOTPSlot index={13} />\n              <InputOTPSlot index={14} />\n              <InputOTPSlot index={15} />\n            </div>\n          </InputOTPGroup>\n        </InputOTP>\n      </div>;\n  }\n}',...Pattern.parameters?.docs?.source},description:{story:"OTP input with pattern.",...Pattern.parameters?.docs?.description}}},WithValidation.parameters={...WithValidation.parameters,docs:{...WithValidation.parameters?.docs,source:{originalSource:'{\n  render: function ValidationOTP() {\n    const [value, setValue] = useState("");\n    const [isValid, setIsValid] = useState<boolean | null>(null);\n    const correctCode = "123456";\n    const validateCode = () => {\n      setIsValid(value === correctCode);\n    };\n    const resetCode = () => {\n      setValue("");\n      setIsValid(null);\n    };\n    return <div className="space-y-4">\n        <div className="space-y-2">\n          <Label htmlFor="otp-validation">Enter verification code</Label>\n          <InputOTP id="otp-validation" maxLength={6} value={value} onChange={value => {\n          setValue(value);\n          setIsValid(null);\n        }}>\n            <InputOTPGroup>\n              <InputOTPSlot index={0} />\n              <InputOTPSlot index={1} />\n              <InputOTPSlot index={2} />\n              <InputOTPSlot index={3} />\n              <InputOTPSlot index={4} />\n              <InputOTPSlot index={5} />\n            </InputOTPGroup>\n          </InputOTP>\n          {isValid === true && <p className="text-sm text-green-500 flex items-center">\n              <Check className="mr-1 h-4 w-4" /> Code is correct\n            </p>}\n          {isValid === false && <p className="text-sm text-destructive">Invalid code. Try again.</p>}\n          <p className="text-sm text-muted-foreground">\n            Hint: The correct code is {correctCode}\n          </p>\n        </div>\n        <div className="flex gap-2">\n          <Button onClick={validateCode} disabled={value.length !== 6}>\n            Verify\n          </Button>\n          <Button variant="outline" onClick={resetCode}>\n            Reset\n          </Button>\n        </div>\n      </div>;\n  }\n}',...WithValidation.parameters?.docs?.source},description:{story:"OTP input with validation.",...WithValidation.parameters?.docs?.description}}},WithPaste.parameters={...WithPaste.parameters,docs:{...WithPaste.parameters?.docs,source:{originalSource:'{\n  render: function PasteOTP() {\n    const [value, setValue] = useState("");\n    const [copied, setCopied] = useState(false);\n    const sampleCode = "987654";\n    const copyToClipboard = async () => {\n      try {\n        await navigator.clipboard.writeText(sampleCode);\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      } catch (err) {\n        console.error("Failed to copy text: ", err);\n      }\n    };\n    return <div className="space-y-4">\n        <div className="space-y-2">\n          <div className="flex justify-between items-center">\n            <Label htmlFor="otp-paste">Enter verification code</Label>\n            <Button variant="outline" size="sm" className="h-8 gap-1" onClick={copyToClipboard}>\n              {copied ? <>\n                  <Check className="h-3.5 w-3.5" />\n                  Copied!\n                </> : <>\n                  <Copy className="h-3.5 w-3.5" />\n                  Copy sample\n                </>}\n            </Button>\n          </div>\n          <InputOTP id="otp-paste" maxLength={6} value={value} onChange={value => setValue(value)}>\n            <InputOTPGroup>\n              <InputOTPSlot index={0} />\n              <InputOTPSlot index={1} />\n              <InputOTPSlot index={2} />\n              <InputOTPSlot index={3} />\n              <InputOTPSlot index={4} />\n              <InputOTPSlot index={5} />\n            </InputOTPGroup>\n          </InputOTP>\n          <p className="text-sm text-muted-foreground">\n            Click "Copy sample" and then paste (Ctrl+V/Cmd+V) into the input.\n          </p>\n        </div>\n      </div>;\n  }\n}',...WithPaste.parameters?.docs?.source},description:{story:"OTP input with paste functionality.",...WithPaste.parameters?.docs?.description}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);