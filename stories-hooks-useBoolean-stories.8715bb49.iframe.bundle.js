/*! For license information please see stories-hooks-useBoolean-stories.8715bb49.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[6721],{"./node_modules/react/cjs/react-jsx-runtime.production.js":(__unused_webpack_module,exports)=>{var REACT_ELEMENT_TYPE=Symbol.for("react.transitional.element"),REACT_FRAGMENT_TYPE=Symbol.for("react.fragment");function jsxProd(type,config,maybeKey){var key=null;if(void 0!==maybeKey&&(key=""+maybeKey),void 0!==config.key&&(key=""+config.key),"key"in config)for(var propName in maybeKey={},config)"key"!==propName&&(maybeKey[propName]=config[propName]);else maybeKey=config;return config=maybeKey.ref,{$$typeof:REACT_ELEMENT_TYPE,type,key,ref:void 0!==config?config:null,props:maybeKey}}exports.Fragment=REACT_FRAGMENT_TYPE,exports.jsx=jsxProd,exports.jsxs=jsxProd},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.js")},"./src/hooks/useToggle.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const __WEBPACK_DEFAULT_EXPORT__=initialValue=>{const[state,dispatch]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(((currentState,action)=>"boolean"==typeof action?action:!currentState),initialValue);return[state,dispatch]}},"./src/stories/hooks/useBoolean.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useBoolean_stories});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_require__("./node_modules/react/index.js");const useBoolean=__webpack_require__("./src/hooks/useToggle.ts").A;var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useBoolean_stories={title:"Hooks/State Management/useBoolean",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useBoolean` is a hook that manages boolean state with convenient toggle functionality.\nIt\'s an alias for useToggle, providing a simple way to handle boolean states and their transitions.\n\n### Module Federation Import\n```tsx\nimport { useBoolean } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useBoolean } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const [isOpen, setIsOpen] = useBoolean(false);\n\n  return (\n    <div>\n      <button onClick={() => setIsOpen()}>Toggle Modal</button>\n      {isOpen && <div>Modal Content</div>}\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseBoolean(\n  initialValue: boolean // Initial boolean state\n): [boolean, (nextValue?: boolean | undefined) => void]\n```\n\n### Returns\nA tuple containing:\n- state: boolean - Current boolean state\n- setState: (nextValue?: boolean | undefined) => void\n  - When called with no arguments, toggles the state\n  - When called with a boolean, sets the state to that value\n\n### Browser Compatibility\nUses standard React hooks, supported in all modern browsers.'}}},tags:["autodocs"],decorators:[Story=>(0,jsx_runtime.jsx)(ThemeProvider.N,{children:(0,jsx_runtime.jsx)(Story,{})})]},Example={render:()=>{const[isModalOpen,setIsModalOpen]=useBoolean(!1),[isDarkMode,setIsDarkMode]=useBoolean(!1),[isNotificationsEnabled,setIsNotificationsEnabled]=useBoolean(!0);return(0,jsx_runtime.jsx)("div",{className:"space-y-6 max-w-lg",children:(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h3",{className:"text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100",children:"Boolean State Examples"}),(0,jsx_runtime.jsx)("div",{className:"bg-slate-100 dark:bg-slate-800 p-4 rounded-lg",children:(0,jsx_runtime.jsxs)("div",{className:"space-y-6",children:[(0,jsx_runtime.jsxs)("div",{className:"space-y-2",children:[(0,jsx_runtime.jsxs)("div",{className:"flex items-center justify-between",children:[(0,jsx_runtime.jsx)("span",{className:"text-sm text-slate-600 dark:text-slate-400",children:"Modal"}),(0,jsx_runtime.jsx)("button",{onClick:()=>setIsModalOpen(),className:"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors",children:isModalOpen?"Close Modal":"Open Modal"})]}),isModalOpen&&(0,jsx_runtime.jsxs)("div",{className:"bg-white dark:bg-slate-700 rounded-md p-4 shadow-lg border border-slate-200 dark:border-slate-600",children:[(0,jsx_runtime.jsxs)("div",{className:"flex justify-between items-center mb-2",children:[(0,jsx_runtime.jsx)("h4",{className:"text-sm font-medium text-slate-900 dark:text-slate-100",children:"Modal Content"}),(0,jsx_runtime.jsx)("button",{onClick:()=>setIsModalOpen(!1),className:"text-slate-400 hover:text-slate-500 dark:text-slate-500 dark:hover:text-slate-400",children:(0,jsx_runtime.jsx)("svg",{className:"w-4 h-4",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:(0,jsx_runtime.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M6 18L18 6M6 6l12 12"})})})]}),(0,jsx_runtime.jsx)("p",{className:"text-sm text-slate-600 dark:text-slate-400",children:"This is a simple modal example using useBoolean."})]})]}),(0,jsx_runtime.jsxs)("div",{className:"flex items-center justify-between",children:[(0,jsx_runtime.jsx)("span",{className:"text-sm text-slate-600 dark:text-slate-400",children:"Notifications"}),(0,jsx_runtime.jsxs)("div",{className:"flex items-center space-x-2",children:[(0,jsx_runtime.jsx)("button",{onClick:()=>setIsNotificationsEnabled(),className:"relative inline-flex h-6 w-11 items-center rounded-full transition-colors "+(isNotificationsEnabled?"bg-green-500":"bg-slate-300 dark:bg-slate-600"),children:(0,jsx_runtime.jsx)("span",{className:"inline-block h-4 w-4 transform rounded-full bg-white transition-transform "+(isNotificationsEnabled?"translate-x-6":"translate-x-1")})}),(0,jsx_runtime.jsx)("span",{className:"text-sm text-slate-700 dark:text-slate-300",children:isNotificationsEnabled?"Enabled":"Disabled"})]})]}),(0,jsx_runtime.jsxs)("div",{className:"space-y-2",children:[(0,jsx_runtime.jsx)("div",{className:"text-sm text-slate-600 dark:text-slate-400",children:"Force Value Controls"}),(0,jsx_runtime.jsxs)("div",{className:"flex space-x-2",children:[(0,jsx_runtime.jsx)("button",{onClick:()=>setIsNotificationsEnabled(!0),className:"px-3 py-1 bg-green-500 hover:bg-green-600 text-white text-sm rounded",children:"Force Enable"}),(0,jsx_runtime.jsx)("button",{onClick:()=>setIsNotificationsEnabled(!1),className:"px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-sm rounded",children:"Force Disable"})]})]}),(0,jsx_runtime.jsx)("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded",children:(0,jsx_runtime.jsx)("p",{className:"text-sm text-blue-600 dark:text-blue-400",children:"Play around the boolean state with the buttons/ modal above. ðŸŸ¢-ðŸ”´"})})]})})]})})}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [isModalOpen, setIsModalOpen] = useBoolean(false);\n    const [isDarkMode, setIsDarkMode] = useBoolean(false);\n    const [isNotificationsEnabled, setIsNotificationsEnabled] = useBoolean(true);\n    return <div className="space-y-6 max-w-lg">\n        <div>\n          <h3 className="text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100">\n            Boolean State Examples\n          </h3>\n          <div className="bg-slate-100 dark:bg-slate-800 p-4 rounded-lg">\n            <div className="space-y-6">\n              {/* Modal Example */}\n              <div className="space-y-2">\n                <div className="flex items-center justify-between">\n                  <span className="text-sm text-slate-600 dark:text-slate-400">\n                    Modal\n                  </span>\n                  <button onClick={() => setIsModalOpen()} className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors">\n                    {isModalOpen ? "Close Modal" : "Open Modal"}\n                  </button>\n                </div>\n                {isModalOpen && <div className="bg-white dark:bg-slate-700 rounded-md p-4 shadow-lg border border-slate-200 dark:border-slate-600">\n                    <div className="flex justify-between items-center mb-2">\n                      <h4 className="text-sm font-medium text-slate-900 dark:text-slate-100">\n                        Modal Content\n                      </h4>\n                      <button onClick={() => setIsModalOpen(false)} className="text-slate-400 hover:text-slate-500 dark:text-slate-500 dark:hover:text-slate-400">\n                        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />\n                        </svg>\n                      </button>\n                    </div>\n                    <p className="text-sm text-slate-600 dark:text-slate-400">\n                      This is a simple modal example using useBoolean.\n                    </p>\n                  </div>}\n              </div>\n\n              {/* Notifications Toggle Example */}\n              <div className="flex items-center justify-between">\n                <span className="text-sm text-slate-600 dark:text-slate-400">\n                  Notifications\n                </span>\n                <div className="flex items-center space-x-2">\n                  <button onClick={() => setIsNotificationsEnabled()} className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${isNotificationsEnabled ? "bg-green-500" : "bg-slate-300 dark:bg-slate-600"}`}>\n                    <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${isNotificationsEnabled ? "translate-x-6" : "translate-x-1"}`} />\n                  </button>\n                  <span className="text-sm text-slate-700 dark:text-slate-300">\n                    {isNotificationsEnabled ? "Enabled" : "Disabled"}\n                  </span>\n                </div>\n              </div>\n\n              {/* Force Value Example */}\n              <div className="space-y-2">\n                <div className="text-sm text-slate-600 dark:text-slate-400">\n                  Force Value Controls\n                </div>\n                <div className="flex space-x-2">\n                  <button onClick={() => setIsNotificationsEnabled(true)} className="px-3 py-1 bg-green-500 hover:bg-green-600 text-white text-sm rounded">\n                    Force Enable\n                  </button>\n                  <button onClick={() => setIsNotificationsEnabled(false)} className="px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-sm rounded">\n                    Force Disable\n                  </button>\n                </div>\n              </div>\n\n              {/* Instructions */}\n              <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n                <p className="text-sm text-blue-600 dark:text-blue-400">\n                  Play around the boolean state with the buttons/ modal above.\n                  ðŸŸ¢-ðŸ”´\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThemeProviderContext.Provider,{...props,value,children})}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);