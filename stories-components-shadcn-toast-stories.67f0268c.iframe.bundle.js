"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[6247],{"./src/components/shadcn/button.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>Button,r:()=>buttonVariants});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@radix-ui/react-slot/dist/index.mjs"),class_variance_authority__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/class-variance-authority/dist/index.mjs"),_lib__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/lib/utils.ts");const buttonVariants=(0,class_variance_authority__WEBPACK_IMPORTED_MODULE_1__.F)("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",{variants:{variant:{default:"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",destructive:"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",outline:"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-9 px-4 py-2 has-[>svg]:px-3",sm:"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",lg:"h-10 rounded-md px-6 has-[>svg]:px-4",icon:"size-9"}},defaultVariants:{variant:"default",size:"default"}});function Button({className,variant,size,asChild=!1,...props}){const Comp=asChild?_radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_2__.DX:"button";return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Comp,{"data-slot":"button",className:(0,_lib__WEBPACK_IMPORTED_MODULE_3__.cn)(buttonVariants({variant,size,className})),...props})}Button.__docgenInfo={description:"",methods:[],displayName:"Button",props:{asChild:{required:!1,tsType:{name:"boolean"},description:"",defaultValue:{value:"false",computed:!1}}}}},"./src/lib/utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{cn:()=>cn});var clsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),tailwind_merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tailwind-merge/dist/bundle-mjs.mjs");const cn=(...inputs)=>(0,tailwind_merge__WEBPACK_IMPORTED_MODULE_0__.QP)((0,clsx__WEBPACK_IMPORTED_MODULE_1__.$)(inputs))},"./src/stories/components/shadcn/toast.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomDuration:()=>CustomDuration,CustomPosition:()=>CustomPosition,Default:()=>Default,MultipleToasts:()=>MultipleToasts,Variants:()=>Variants,WithAction:()=>WithAction,WithIcons:()=>WithIcons,__namedExportsOrder:()=>__namedExportsOrder,default:()=>toast_stories});var react=__webpack_require__("./node_modules/react/index.js"),dist=__webpack_require__("./node_modules/@radix-ui/react-toast/dist/index.mjs"),class_variance_authority_dist=__webpack_require__("./node_modules/class-variance-authority/dist/index.mjs"),x=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/x.js"),utils=__webpack_require__("./src/lib/utils.ts");const ToastProvider=dist.Kq,ToastViewport=react.forwardRef((({className,...props},ref)=>react.createElement(dist.LM,{ref,className:(0,utils.cn)("fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",className),...props})));ToastViewport.displayName=dist.LM.displayName;const toastVariants=(0,class_variance_authority_dist.F)("group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border border-slate-200 p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full dark:border-slate-800",{variants:{variant:{default:"border bg-white text-slate-950 dark:bg-slate-950 dark:text-slate-50",destructive:"destructive group border-red-500 bg-red-500 text-slate-50 dark:border-red-900 dark:bg-red-900 dark:text-slate-50"}},defaultVariants:{variant:"default"}}),Toast=react.forwardRef((({className,variant,...props},ref)=>react.createElement(dist.bL,{ref,className:(0,utils.cn)(toastVariants({variant}),className),...props})));Toast.displayName=dist.bL.displayName;const ToastAction=react.forwardRef((({className,...props},ref)=>react.createElement(dist.rc,{ref,className:(0,utils.cn)("inline-flex h-8 shrink-0 items-center justify-center rounded-md border border-slate-200 bg-transparent px-3 text-sm font-medium ring-offset-white transition-colors hover:bg-slate-100 focus:outline-none focus:ring-2 focus:ring-slate-950 focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-slate-100/40 group-[.destructive]:hover:border-red-500/30 group-[.destructive]:hover:bg-red-500 group-[.destructive]:hover:text-slate-50 group-[.destructive]:focus:ring-red-500 dark:border-slate-800 dark:ring-offset-slate-950 dark:hover:bg-slate-800 dark:focus:ring-slate-300 dark:group-[.destructive]:border-slate-800/40 dark:group-[.destructive]:hover:border-red-900/30 dark:group-[.destructive]:hover:bg-red-900 dark:group-[.destructive]:hover:text-slate-50 dark:group-[.destructive]:focus:ring-red-900",className),...props})));ToastAction.displayName=dist.rc.displayName;const ToastClose=react.forwardRef((({className,...props},ref)=>react.createElement(dist.bm,{ref,className:(0,utils.cn)("absolute right-2 top-2 rounded-md p-1 text-slate-950/50 opacity-0 transition-opacity hover:text-slate-950 focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600 dark:text-slate-50/50 dark:hover:text-slate-50",className),"toast-close":"",...props},react.createElement(x.A,{className:"h-4 w-4"}))));ToastClose.displayName=dist.bm.displayName;const ToastTitle=react.forwardRef((({className,...props},ref)=>react.createElement(dist.hE,{ref,className:(0,utils.cn)("text-sm font-semibold",className),...props})));ToastTitle.displayName=dist.hE.displayName;const ToastDescription=react.forwardRef((({className,...props},ref)=>react.createElement(dist.VY,{ref,className:(0,utils.cn)("text-sm opacity-90",className),...props})));ToastDescription.displayName=dist.VY.displayName,ToastViewport.__docgenInfo={description:"",methods:[]},Toast.__docgenInfo={description:"",methods:[]},ToastTitle.__docgenInfo={description:"",methods:[]},ToastDescription.__docgenInfo={description:"",methods:[]},ToastClose.__docgenInfo={description:"",methods:[]},ToastAction.__docgenInfo={description:"",methods:[]};let count=0;const toastTimeouts=new Map,addToRemoveQueue=toastId=>{if(toastTimeouts.has(toastId))return;const timeout=setTimeout((()=>{toastTimeouts.delete(toastId),dispatch({type:"REMOVE_TOAST",toastId})}),1e6);toastTimeouts.set(toastId,timeout)},reducer=(state,action)=>{switch(action.type){case"ADD_TOAST":return{...state,toasts:[action.toast,...state.toasts].slice(0,1)};case"UPDATE_TOAST":return{...state,toasts:state.toasts.map((t=>t.id===action.toast.id?{...t,...action.toast}:t))};case"DISMISS_TOAST":{const{toastId}=action;return toastId?addToRemoveQueue(toastId):state.toasts.forEach((toast=>{addToRemoveQueue(toast.id)})),{...state,toasts:state.toasts.map((t=>t.id===toastId||void 0===toastId?{...t,open:!1}:t))}}case"REMOVE_TOAST":return void 0===action.toastId?{...state,toasts:[]}:{...state,toasts:state.toasts.filter((t=>t.id!==action.toastId))}}},listeners=[];let memoryState={toasts:[]};function dispatch(action){memoryState=reducer(memoryState,action),listeners.forEach((listener=>{listener(memoryState)}))}function toast({...props}){const id=function genId(){return count=(count+1)%Number.MAX_SAFE_INTEGER,count.toString()}(),dismiss=()=>dispatch({type:"DISMISS_TOAST",toastId:id});return dispatch({type:"ADD_TOAST",toast:{...props,id,open:!0,onOpenChange:open=>{open||dismiss()}}}),{id,dismiss,update:props=>dispatch({type:"UPDATE_TOAST",toast:{...props,id}})}}function useToast(){const[state,setState]=react.useState(memoryState);return react.useEffect((()=>(listeners.push(setState),()=>{const index=listeners.indexOf(setState);index>-1&&listeners.splice(index,1)})),[state]),{...state,toast,dismiss:toastId=>dispatch({type:"DISMISS_TOAST",toastId})}}function Toaster(){const{toasts}=useToast();return react.createElement(ToastProvider,null,toasts.map((function({id,title,description,action,...props}){return react.createElement(Toast,{key:id,...props},react.createElement("div",{className:"grid gap-1"},title&&react.createElement(ToastTitle,null,title),description&&react.createElement(ToastDescription,null,description)),action,react.createElement(ToastClose,null))})),react.createElement(ToastViewport,null))}Toaster.__docgenInfo={description:"",methods:[],displayName:"Toaster"};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx"),shadcn_button=__webpack_require__("./src/components/shadcn/button.tsx"),circle_check_big=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/circle-check-big.js"),circle_alert=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/circle-alert.js"),info=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/info.js"),circle_x=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/circle-x.js");const toast_stories={title:"Components/Shadcn/Toast",component:Toast,parameters:{layout:"centered"},tags:["autodocs","stable","version:2.3.0"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement("div",{className:"w-full max-w-md"},react.createElement(Story,null),react.createElement(Toaster,null)))]},Default={render:function DefaultToast(){const{toast}=useToast();return react.createElement(shadcn_button.$,{onClick:()=>{toast({title:"Scheduled: Catch up",description:"Friday, February 10, 2023 at 5:57 PM"})}},"Show Toast")}},WithAction={render:function ActionToast(){const{toast}=useToast();return react.createElement(shadcn_button.$,{onClick:()=>{toast({title:"Uh oh! Something went wrong.",description:"There was a problem with your request.",action:react.createElement(ToastAction,{altText:"Try again"},"Try again")})}},"Show Toast with Action")}},Variants={render:function VariantsToast(){const{toast}=useToast();return react.createElement("div",{className:"flex flex-col gap-2"},react.createElement(shadcn_button.$,{onClick:()=>{toast({title:"Default Toast",description:"This is a default toast message"})}},"Default"),react.createElement(shadcn_button.$,{variant:"destructive",onClick:()=>{toast({variant:"destructive",title:"Error",description:"Something went wrong.",action:react.createElement(ToastAction,{altText:"Try again"},"Try again")})}},"Destructive"),react.createElement(shadcn_button.$,{variant:"outline",onClick:()=>{toast({title:"Success",description:"Your changes have been saved.",className:"bg-green-500 text-white border-green-500"})}},"Success (Custom)"))}},WithIcons={render:function IconsToast(){const{toast}=useToast();return react.createElement("div",{className:"space-y-4"},react.createElement("h3",{className:"text-lg font-medium"},"Toast with Icons"),react.createElement("div",{className:"flex flex-wrap gap-2"},react.createElement(shadcn_button.$,{variant:"outline",onClick:()=>{toast({title:"Success",description:"Your changes have been saved.",className:"bg-green-500 text-white border-green-500"})}},react.createElement(circle_check_big.A,{className:"mr-2 h-4 w-4"}),"Success"),react.createElement(shadcn_button.$,{variant:"outline",onClick:()=>{toast({title:"Warning",description:"Your storage is almost full.",className:"bg-yellow-500 text-white border-yellow-500"})}},react.createElement(circle_alert.A,{className:"mr-2 h-4 w-4"}),"Warning"),react.createElement(shadcn_button.$,{variant:"outline",onClick:()=>{toast({title:"Info",description:"A new version is available.",className:"bg-blue-500 text-white border-blue-500"})}},react.createElement(info.A,{className:"mr-2 h-4 w-4"}),"Info"),react.createElement(shadcn_button.$,{variant:"outline",onClick:()=>{toast({title:"Error",description:"Something went wrong.",variant:"destructive"})}},react.createElement(circle_x.A,{className:"mr-2 h-4 w-4"}),"Error")))}},CustomDuration={render:function DurationToast(){const{toast}=useToast();return react.createElement("div",{className:"flex flex-col gap-2"},react.createElement(shadcn_button.$,{onClick:()=>{toast({title:"Short Duration",description:"This toast will disappear in 2 seconds.",duration:2e3})}},"Short Duration (2s)"),react.createElement(shadcn_button.$,{onClick:()=>{toast({title:"Long Duration",description:"This toast will disappear in 10 seconds.",duration:1e4})}},"Long Duration (10s)"),react.createElement(shadcn_button.$,{onClick:()=>{toast({title:"Infinite Duration",description:"This toast will not disappear automatically.",duration:1/0})}},"Infinite Duration"))}},MultipleToasts={render:function MultipleToastsExample(){const{toast}=useToast();return react.createElement(shadcn_button.$,{onClick:()=>{toast({title:"First Toast",description:"This is the first toast message."}),setTimeout((()=>{toast({title:"Second Toast",description:"This is the second toast message.",variant:"destructive"})}),1e3),setTimeout((()=>{toast({title:"Third Toast",description:"This is the third toast message.",className:"bg-green-500 text-white border-green-500"})}),2e3)}},"Show Multiple Toasts")}},CustomPosition={render:function PositionToast(){const{toast}=useToast();return react.createElement("div",{className:"flex flex-col gap-2"},react.createElement(shadcn_button.$,{onClick:()=>{toast({title:"Top Right",description:"This is the default position."})}},"Top Right (Default)"),react.createElement(shadcn_button.$,{onClick:()=>{toast({title:"Custom Position",description:"This toast has a custom position.",className:"top-center"})}},"Custom Position"),react.createElement("p",{className:"text-sm text-muted-foreground mt-2"},"Note: Position is controlled by the Toaster component. In a real application, you would customize the Toaster component to change the position."))}},__namedExportsOrder=["Default","WithAction","Variants","WithIcons","CustomDuration","MultipleToasts","CustomPosition"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: function DefaultToast() {\n    const {\n      toast\n    } = useToast();\n    return <Button onClick={() => {\n      toast({\n        title: "Scheduled: Catch up",\n        description: "Friday, February 10, 2023 at 5:57 PM"\n      });\n    }}>\n        Show Toast\n      </Button>;\n  }\n}',...Default.parameters?.docs?.source},description:{story:"Default toast with a simple message.",...Default.parameters?.docs?.description}}},WithAction.parameters={...WithAction.parameters,docs:{...WithAction.parameters?.docs,source:{originalSource:'{\n  render: function ActionToast() {\n    const {\n      toast\n    } = useToast();\n    return <Button onClick={() => {\n      toast({\n        title: "Uh oh! Something went wrong.",\n        description: "There was a problem with your request.",\n        action: <ToastAction altText="Try again">Try again</ToastAction>\n      });\n    }}>\n        Show Toast with Action\n      </Button>;\n  }\n}',...WithAction.parameters?.docs?.source},description:{story:"Toast with an action button.",...WithAction.parameters?.docs?.description}}},Variants.parameters={...Variants.parameters,docs:{...Variants.parameters?.docs,source:{originalSource:'{\n  render: function VariantsToast() {\n    const {\n      toast\n    } = useToast();\n    return <div className="flex flex-col gap-2">\n        <Button onClick={() => {\n        toast({\n          title: "Default Toast",\n          description: "This is a default toast message"\n        });\n      }}>\n          Default\n        </Button>\n        <Button variant="destructive" onClick={() => {\n        toast({\n          variant: "destructive",\n          title: "Error",\n          description: "Something went wrong.",\n          action: <ToastAction altText="Try again">Try again</ToastAction>\n        });\n      }}>\n          Destructive\n        </Button>\n        <Button variant="outline" onClick={() => {\n        toast({\n          title: "Success",\n          description: "Your changes have been saved.",\n          className: "bg-green-500 text-white border-green-500"\n        });\n      }}>\n          Success (Custom)\n        </Button>\n      </div>;\n  }\n}',...Variants.parameters?.docs?.source},description:{story:"Toast with different variants.",...Variants.parameters?.docs?.description}}},WithIcons.parameters={...WithIcons.parameters,docs:{...WithIcons.parameters?.docs,source:{originalSource:'{\n  render: function IconsToast() {\n    const {\n      toast\n    } = useToast();\n    return <div className="space-y-4">\n        <h3 className="text-lg font-medium">Toast with Icons</h3>\n        <div className="flex flex-wrap gap-2">\n          <Button variant="outline" onClick={() => {\n          toast({\n            title: "Success",\n            description: "Your changes have been saved.",\n            className: "bg-green-500 text-white border-green-500"\n          });\n        }}>\n            <CheckCircle className="mr-2 h-4 w-4" />\n            Success\n          </Button>\n          <Button variant="outline" onClick={() => {\n          toast({\n            title: "Warning",\n            description: "Your storage is almost full.",\n            className: "bg-yellow-500 text-white border-yellow-500"\n          });\n        }}>\n            <AlertCircle className="mr-2 h-4 w-4" />\n            Warning\n          </Button>\n          <Button variant="outline" onClick={() => {\n          toast({\n            title: "Info",\n            description: "A new version is available.",\n            className: "bg-blue-500 text-white border-blue-500"\n          });\n        }}>\n            <Info className="mr-2 h-4 w-4" />\n            Info\n          </Button>\n          <Button variant="outline" onClick={() => {\n          toast({\n            title: "Error",\n            description: "Something went wrong.",\n            variant: "destructive"\n          });\n        }}>\n            <XCircle className="mr-2 h-4 w-4" />\n            Error\n          </Button>\n        </div>\n      </div>;\n  }\n}',...WithIcons.parameters?.docs?.source},description:{story:"Toast with different icons.",...WithIcons.parameters?.docs?.description}}},CustomDuration.parameters={...CustomDuration.parameters,docs:{...CustomDuration.parameters?.docs,source:{originalSource:'{\n  render: function DurationToast() {\n    const {\n      toast\n    } = useToast();\n    return <div className="flex flex-col gap-2">\n        <Button onClick={() => {\n        toast({\n          title: "Short Duration",\n          description: "This toast will disappear in 2 seconds.",\n          duration: 2000\n        });\n      }}>\n          Short Duration (2s)\n        </Button>\n        <Button onClick={() => {\n        toast({\n          title: "Long Duration",\n          description: "This toast will disappear in 10 seconds.",\n          duration: 10000\n        });\n      }}>\n          Long Duration (10s)\n        </Button>\n        <Button onClick={() => {\n        toast({\n          title: "Infinite Duration",\n          description: "This toast will not disappear automatically.",\n          duration: Infinity\n        });\n      }}>\n          Infinite Duration\n        </Button>\n      </div>;\n  }\n}',...CustomDuration.parameters?.docs?.source},description:{story:"Toast with custom duration.",...CustomDuration.parameters?.docs?.description}}},MultipleToasts.parameters={...MultipleToasts.parameters,docs:{...MultipleToasts.parameters?.docs,source:{originalSource:'{\n  render: function MultipleToastsExample() {\n    const {\n      toast\n    } = useToast();\n    const showMultipleToasts = () => {\n      toast({\n        title: "First Toast",\n        description: "This is the first toast message."\n      });\n      setTimeout(() => {\n        toast({\n          title: "Second Toast",\n          description: "This is the second toast message.",\n          variant: "destructive"\n        });\n      }, 1000);\n      setTimeout(() => {\n        toast({\n          title: "Third Toast",\n          description: "This is the third toast message.",\n          className: "bg-green-500 text-white border-green-500"\n        });\n      }, 2000);\n    };\n    return <Button onClick={showMultipleToasts}>Show Multiple Toasts</Button>;\n  }\n}',...MultipleToasts.parameters?.docs?.source},description:{story:"Multiple toasts stacked.",...MultipleToasts.parameters?.docs?.description}}},CustomPosition.parameters={...CustomPosition.parameters,docs:{...CustomPosition.parameters?.docs,source:{originalSource:'{\n  render: function PositionToast() {\n    const {\n      toast\n    } = useToast();\n    return <div className="flex flex-col gap-2">\n        <Button onClick={() => {\n        toast({\n          title: "Top Right",\n          description: "This is the default position."\n        });\n      }}>\n          Top Right (Default)\n        </Button>\n        <Button onClick={() => {\n        toast({\n          title: "Custom Position",\n          description: "This toast has a custom position.",\n          className: "top-center"\n        });\n      }}>\n          Custom Position\n        </Button>\n        <p className="text-sm text-muted-foreground mt-2">\n          Note: Position is controlled by the Toaster component. In a real\n          application, you would customize the Toaster component to change the\n          position.\n        </p>\n      </div>;\n  }\n}',...CustomPosition.parameters?.docs?.source},description:{story:"Toast with custom positioning.",...CustomPosition.parameters?.docs?.description}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);