"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[1519],{"./src/stories/hooks/useMap.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useMap_stories});var react=__webpack_require__("./node_modules/react/index.js");const hooks_useMap=(initialMap={})=>{const[map,set]=(0,react.useState)(initialMap),stableActions=(0,react.useMemo)((()=>({set:(key,entry)=>{set((prevMap=>({...prevMap,[key]:entry})))},setAll:newMap=>{set(newMap)},remove:key=>{set((prevMap=>{const{[key]:omit,...rest}=prevMap;return rest}))},reset:()=>set(initialMap)})),[set]),utils={get:(0,react.useCallback)((key=>map[key]),[map]),...stableActions};return[map,utils]};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useMap_stories={title:"Hooks/State Management/useMap",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useMap` is a hook that provides a Map-like state management with a convenient API.\nIt\'s useful for managing key-value pairs with stable actions and type safety.\n\n### Module Federation Import\n```tsx\nimport { useMap } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useMap } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const [map, { set, get, remove, reset }] = useMap({\n    name: "John",\n    age: 30,\n  });\n\n  return (\n    <div>\n      <p>Name: {get("name")}</p>\n      <button onClick={() => set("age", 31)}>\n        Increment Age\n      </button>\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseMap<T extends object>(\n  initialMap: T = {} as T\n): [T, Actions<T>]\n```\n\n### Returns\n```tsx\n[\n  map: T,                                    // Current map state\n  actions: {\n    get: <K extends keyof T>(key: K) => T[K],    // Get value by key\n    set: <K extends keyof T>(key: K, value: T[K]) => void,   // Set value by key\n    setAll: (newMap: T) => void,            // Replace entire map\n    remove: <K extends keyof T>(key: K) => void,  // Remove key from map\n    reset: () => void                       // Reset to initial map\n  }\n]\n```\n\n### Features\n- Type-safe: Fully typed with TypeScript\n- Stable actions: Actions are memoized\n- Immutable updates: State updates preserve immutability\n- Familiar API: Similar to native Map interface\n- Reset capability: Can reset to initial state\n\n### Browser Compatibility\nUses standard JavaScript object operations.\nWorks in all modern browsers.\n\n### Related Resources\n- [MDN: Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n- [React State Management](https://reactjs.org/docs/hooks-state.html)'}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},Example={render:()=>{const[map,{get,set,setAll,remove,reset}]=hooks_useMap({name:"John Doe",age:30,email:"john@example.com",preferences:{theme:"light",notifications:!0}}),[newKey,setNewKey]=(0,react.useState)("name"),[newValue,setNewValue]=(0,react.useState)("");return react.createElement("div",{className:"w-[600px]"},react.createElement("div",{className:"bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6"},react.createElement("div",{className:"space-y-2"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Current State"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-700 p-4 rounded"},react.createElement("pre",{className:"text-sm text-slate-700 dark:text-slate-300"},JSON.stringify(map,null,2)))),react.createElement("div",{className:"space-y-4"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Set Value"),react.createElement("div",{className:"space-y-2"},react.createElement("select",{value:newKey,onChange:e=>setNewKey(e.target.value),className:"w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700"},react.createElement("option",{value:"name"},"name"),react.createElement("option",{value:"age"},"age"),react.createElement("option",{value:"email"},"email"),react.createElement("option",{value:"preferences"},"preferences")),react.createElement("input",{type:"age"===newKey?"number":"text",value:newValue,onChange:e=>setNewValue(e.target.value),placeholder:"preferences"===newKey?'{"theme": "dark", "notifications": true}':`Enter new ${newKey}`,className:"w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700"}),react.createElement("button",{onClick:()=>{switch(newKey){case"name":case"email":set(newKey,newValue);break;case"age":set(newKey,parseInt(newValue)||0);break;case"preferences":try{const preferences=JSON.parse(newValue);set(newKey,preferences)}catch{alert("Invalid JSON for preferences")}}setNewValue("")},className:"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"},"Set Value"))),react.createElement("div",{className:"space-y-4"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Quick Actions"),react.createElement("div",{className:"flex flex-wrap gap-2"},react.createElement("button",{onClick:()=>set("age",get("age")+1),className:"px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm"},"Increment Age"),react.createElement("button",{onClick:()=>set("preferences",{...get("preferences"),theme:"light"===get("preferences").theme?"dark":"light"}),className:"px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 text-sm"},"Toggle Theme"),react.createElement("button",{onClick:()=>remove("email"),className:"px-3 py-1 bg-yellow-500 text-white rounded hover:bg-yellow-600 text-sm"},"Remove Email"),react.createElement("button",{onClick:()=>setAll({name:"Jane Doe",age:25,email:"jane@example.com",preferences:{theme:"dark",notifications:!1}}),className:"px-3 py-1 bg-indigo-500 text-white rounded hover:bg-indigo-600 text-sm"},"Set All (New User)"),react.createElement("button",{onClick:reset,className:"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm"},"Reset"))),react.createElement("div",{className:"space-y-4"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Get Values"),react.createElement("div",{className:"grid grid-cols-2 gap-4"},react.createElement("div",{className:"space-y-1"},react.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Name:"),react.createElement("p",{className:"font-mono text-slate-700 dark:text-slate-300"},get("name"))),react.createElement("div",{className:"space-y-1"},react.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Age:"),react.createElement("p",{className:"font-mono text-slate-700 dark:text-slate-300"},get("age"))),react.createElement("div",{className:"space-y-1"},react.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Email:"),react.createElement("p",{className:"font-mono text-slate-700 dark:text-slate-300"},get("email"))),react.createElement("div",{className:"space-y-1"},react.createElement("p",{className:"text-sm text-slate-500 dark:text-slate-400"},"Theme:"),react.createElement("p",{className:"font-mono text-slate-700 dark:text-slate-300"},get("preferences").theme)))),react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},"Try out the different map operations above! You can set individual values, update nested objects, remove keys, or reset to the initial state. Watch how the current state updates in real-time! 🗺️"))))}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // Initialize map with user data\n    const [map, {\n      get,\n      set,\n      setAll,\n      remove,\n      reset\n    }] = useMap<User>({\n      name: "John Doe",\n      age: 30,\n      email: "john@example.com",\n      preferences: {\n        theme: "light",\n        notifications: true\n      }\n    });\n\n    // Form state\n    const [newKey, setNewKey] = useState<keyof User>("name");\n    const [newValue, setNewValue] = useState("");\n\n    // Helper to safely set value based on key type\n    const handleSetValue = () => {\n      switch (newKey) {\n        case "name":\n        case "email":\n          set(newKey, newValue);\n          break;\n        case "age":\n          set(newKey, parseInt(newValue) || 0);\n          break;\n        case "preferences":\n          try {\n            const preferences = JSON.parse(newValue);\n            set(newKey, preferences);\n          } catch {\n            alert("Invalid JSON for preferences");\n          }\n          break;\n      }\n      setNewValue("");\n    };\n    return <div className="w-[600px]">\n        <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-6">\n          {/* Current State */}\n          <div className="space-y-2">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Current State\n            </h3>\n            <div className="bg-slate-100 dark:bg-slate-700 p-4 rounded">\n              <pre className="text-sm text-slate-700 dark:text-slate-300">\n                {JSON.stringify(map, null, 2)}\n              </pre>\n            </div>\n          </div>\n\n          {/* Set Value Form */}\n          <div className="space-y-4">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Set Value\n            </h3>\n            <div className="space-y-2">\n              <select value={newKey} onChange={e => setNewKey(e.target.value as keyof User)} className="w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700">\n                <option value="name">name</option>\n                <option value="age">age</option>\n                <option value="email">email</option>\n                <option value="preferences">preferences</option>\n              </select>\n              <input type={newKey === "age" ? "number" : "text"} value={newValue} onChange={e => setNewValue(e.target.value)} placeholder={newKey === "preferences" ? \'{"theme": "dark", "notifications": true}\' : `Enter new ${newKey}`} className="w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700" />\n              <button onClick={handleSetValue} className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm">\n                Set Value\n              </button>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className="space-y-4">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Quick Actions\n            </h3>\n            <div className="flex flex-wrap gap-2">\n              <button onClick={() => set("age", get("age") + 1)} className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm">\n                Increment Age\n              </button>\n              <button onClick={() => set("preferences", {\n              ...get("preferences"),\n              theme: get("preferences").theme === "light" ? "dark" : "light"\n            })} className="px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 text-sm">\n                Toggle Theme\n              </button>\n              <button onClick={() => remove("email")} className="px-3 py-1 bg-yellow-500 text-white rounded hover:bg-yellow-600 text-sm">\n                Remove Email\n              </button>\n              <button onClick={() => setAll({\n              name: "Jane Doe",\n              age: 25,\n              email: "jane@example.com",\n              preferences: {\n                theme: "dark",\n                notifications: false\n              }\n            })} className="px-3 py-1 bg-indigo-500 text-white rounded hover:bg-indigo-600 text-sm">\n                Set All (New User)\n              </button>\n              <button onClick={reset} className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm">\n                Reset\n              </button>\n            </div>\n          </div>\n\n          {/* Get Value Display */}\n          <div className="space-y-4">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Get Values\n            </h3>\n            <div className="grid grid-cols-2 gap-4">\n              <div className="space-y-1">\n                <p className="text-sm text-slate-500 dark:text-slate-400">\n                  Name:\n                </p>\n                <p className="font-mono text-slate-700 dark:text-slate-300">\n                  {get("name")}\n                </p>\n              </div>\n              <div className="space-y-1">\n                <p className="text-sm text-slate-500 dark:text-slate-400">\n                  Age:\n                </p>\n                <p className="font-mono text-slate-700 dark:text-slate-300">\n                  {get("age")}\n                </p>\n              </div>\n              <div className="space-y-1">\n                <p className="text-sm text-slate-500 dark:text-slate-400">\n                  Email:\n                </p>\n                <p className="font-mono text-slate-700 dark:text-slate-300">\n                  {get("email")}\n                </p>\n              </div>\n              <div className="space-y-1">\n                <p className="text-sm text-slate-500 dark:text-slate-400">\n                  Theme:\n                </p>\n                <p className="font-mono text-slate-700 dark:text-slate-300">\n                  {get("preferences").theme}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Instructions */}\n          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n            <p className="text-sm text-blue-600 dark:text-blue-400">\n              Try out the different map operations above! You can set individual\n              values, update nested objects, remove keys, or reset to the\n              initial state. Watch how the current state updates in real-time!\n              🗺️\n            </p>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);