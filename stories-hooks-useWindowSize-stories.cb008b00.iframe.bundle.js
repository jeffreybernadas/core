"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[7668],{"./src/stories/hooks/useWindowSize.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useWindowSize_stories});var react=__webpack_require__("./node_modules/react/index.js");var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useWindowSize_stories={title:"Hooks/useWindowSize",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},Example={render:()=>{const{width,height}=(()=>{const[windowSize,setWindowSize]=(0,react.useState)({width:void 0,height:void 0});return(0,react.useEffect)((()=>{const handleResize=()=>setWindowSize({width:window.innerWidth,height:window.innerHeight});return window.addEventListener("resize",handleResize),handleResize(),()=>{window.removeEventListener("resize",handleResize)}}),[]),windowSize})();return react.createElement("div",{className:"space-y-6 max-w-lg"},react.createElement("div",null,react.createElement("h3",{className:"text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100"},"Current Window Size"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-800 p-4 rounded-lg"},react.createElement("p",{className:"text-slate-700 dark:text-slate-300"},"Width: ",width,"px"),react.createElement("p",{className:"text-slate-700 dark:text-slate-300"},"Height: ",height,"px")),react.createElement("p",{className:"mt-4 text-sm text-slate-500 dark:text-slate-400"},"Try resizing your browser window!")))}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const {\n      width,\n      height\n    } = useWindowSize();\n    return <div className="space-y-6 max-w-lg">\n        <div>\n          <h3 className="text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100">\n            Current Window Size\n          </h3>\n          <div className="bg-slate-100 dark:bg-slate-800 p-4 rounded-lg">\n            <p className="text-slate-700 dark:text-slate-300">\n              Width: {width}px\n            </p>\n            <p className="text-slate-700 dark:text-slate-300">\n              Height: {height}px\n            </p>\n          </div>\n          <p className="mt-4 text-sm text-slate-500 dark:text-slate-400">\n            Try resizing your browser window!\n          </p>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source},description:{story:'`useWindowSize` is a hook that returns the current window dimensions and updates when the window is resized.\n\n### Module Federation Import\n```tsx\nimport { useWindowSize } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useWindowSize } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst MyComponent = () => {\n  const { width, height } = useWindowSize();\n\n  return (\n    <div>\n      Window size: {width}px x {height}px\n    </div>\n  );\n};\n```\n\n### Example with Responsive Behavior\n```tsx\nconst ResponsiveComponent = () => {\n  const { width } = useWindowSize();\n  const isMobile = width < 768;\n\n  return (\n    <div>\n      {isMobile ? (\n        <MobileLayout />\n      ) : (\n        <DesktopLayout />\n      )}\n    </div>\n  );\n};\n```\n\n### Returns\n```tsx\n{\n  width: number;  // Current window width in pixels\n  height: number; // Current window height in pixels\n}\n```\n\n### Browser Compatibility\nThis hook uses the following Web APIs:\n- [Window.innerWidth](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n- [Window.innerHeight](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n- [Window: resize event](https://developer.mozilla.org/en-US/docs/Web/API/Window/resize_event)\n\nSupported in all modern browsers. For IE support, consider using a polyfill.',...Example.parameters?.docs?.description}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);