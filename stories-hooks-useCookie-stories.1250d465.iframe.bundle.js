/*! For license information please see stories-hooks-useCookie-stories.1250d465.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[4257],{"./src/stories/hooks/useCookie.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useCookie_stories});var react=__webpack_require__("./node_modules/react/index.js");function js_cookie_assign(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)target[key]=source[key]}return target}var api=function init(converter,defaultAttributes){function set(name,value,attributes){if("undefined"!=typeof document){"number"==typeof(attributes=js_cookie_assign({},defaultAttributes,attributes)).expires&&(attributes.expires=new Date(Date.now()+864e5*attributes.expires)),attributes.expires&&(attributes.expires=attributes.expires.toUTCString()),name=encodeURIComponent(name).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var stringifiedAttributes="";for(var attributeName in attributes)attributes[attributeName]&&(stringifiedAttributes+="; "+attributeName,!0!==attributes[attributeName]&&(stringifiedAttributes+="="+attributes[attributeName].split(";")[0]));return document.cookie=name+"="+converter.write(value,name)+stringifiedAttributes}}return Object.create({set,get:function get(name){if("undefined"!=typeof document&&(!arguments.length||name)){for(var cookies=document.cookie?document.cookie.split("; "):[],jar={},i=0;i<cookies.length;i++){var parts=cookies[i].split("="),value=parts.slice(1).join("=");try{var found=decodeURIComponent(parts[0]);if(jar[found]=converter.read(value,found),name===found)break}catch(e){}}return name?jar[name]:jar}},remove:function(name,attributes){set(name,"",js_cookie_assign({},attributes,{expires:-1}))},withAttributes:function(attributes){return init(this.converter,js_cookie_assign({},this.attributes,attributes))},withConverter:function(converter){return init(js_cookie_assign({},this.converter,converter),this.attributes)}},{attributes:{value:Object.freeze(defaultAttributes)},converter:{value:Object.freeze(converter)}})}({read:function(value){return'"'===value[0]&&(value=value.slice(1,-1)),value.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(value){return encodeURIComponent(value).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"});const hooks_useCookie=cookieName=>{const[value,setValue]=(0,react.useState)((()=>api.get(cookieName)||null));return[value,(0,react.useCallback)(((newValue,options)=>{api.set(cookieName,newValue,options),setValue(newValue)}),[cookieName]),(0,react.useCallback)((()=>{api.remove(cookieName),setValue(null)}),[cookieName])]};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useCookie_stories={title:"Hooks/Browser API/useCookie",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useCookie` is a hook that provides a simple interface for managing browser cookies.\nIt wraps the js-cookie library to provide a React-friendly way to get, set, and delete cookies.\n\n### Module Federation Import\n```tsx\nimport { useCookie } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useCookie } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const [theme, setTheme, removeTheme] = useCookie("theme");\n\n  return (\n    <div>\n      <div>Current theme: {theme || "default"}</div>\n      <button onClick={() => setTheme("dark")}>Set Dark</button>\n      <button onClick={() => setTheme("light")}>Set Light</button>\n      <button onClick={removeTheme}>Reset</button>\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseCookie(\n  cookieName: string // Name of the cookie to manage\n): [\n  value: string | null, // Current cookie value\n  updateCookie: (\n    newValue: string,\n    options?: {\n      expires?: number | Date,\n      path?: string,\n      domain?: string,\n      secure?: boolean,\n      sameSite?: "strict" | "lax" | "none"\n    }\n  ) => void,\n  deleteCookie: () => void // Function to remove the cookie\n]\n```\n\n### Browser Compatibility\n- Uses js-cookie library, which supports all modern browsers\n- Cookie functionality is standard web technology\n- Some options may have different behavior across browsers\n\n### Related Resources\n- [MDN: Using HTTP cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)\n- [js-cookie Documentation](https://github.com/js-cookie/js-cookie#readme)'}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},Example={render:()=>{const[theme,setTheme,removeTheme]=hooks_useCookie("preferred-theme"),[lang,setLang,removeLang]=hooks_useCookie("preferred-language"),[sessionId,setSessionId,removeSessionId]=hooks_useCookie("session-id");return(0,react.useEffect)((()=>{theme||setTheme("system"),lang||setLang("en"),sessionId||setSessionId(Math.random().toString(36).slice(2),{expires:1/24})}),[]),react.createElement("div",{className:"space-y-6 max-w-lg"},react.createElement("div",null,react.createElement("h3",{className:"text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100"},"Cookie Management Examples"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-800 p-4 rounded-lg"},react.createElement("div",{className:"space-y-6"},react.createElement("div",{className:"space-y-2"},react.createElement("div",{className:"flex items-center justify-between"},react.createElement("span",{className:"text-sm font-medium text-slate-700 dark:text-slate-300"},"Theme Preference"),react.createElement("span",{className:"text-xs text-slate-500 dark:text-slate-400"},"Current: ",theme||"Not set")),react.createElement("div",{className:"flex space-x-2"},react.createElement("button",{onClick:()=>setTheme("light"),className:"px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-white text-sm rounded-md transition-colors"},"Light"),react.createElement("button",{onClick:()=>setTheme("dark"),className:"px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md transition-colors"},"Dark"),react.createElement("button",{onClick:()=>setTheme("system"),className:"px-3 py-1 bg-green-500 hover:bg-green-600 text-white text-sm rounded-md transition-colors"},"System"),react.createElement("button",{onClick:removeTheme,className:"px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-sm rounded-md transition-colors"},"Reset"))),react.createElement("div",{className:"space-y-2"},react.createElement("div",{className:"flex items-center justify-between"},react.createElement("span",{className:"text-sm font-medium text-slate-700 dark:text-slate-300"},"Language Preference"),react.createElement("span",{className:"text-xs text-slate-500 dark:text-slate-400"},"Current: ",lang||"Not set")),react.createElement("div",{className:"flex space-x-2"},react.createElement("button",{onClick:()=>setLang("en"),className:"px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md transition-colors"},"English"),react.createElement("button",{onClick:()=>setLang("es"),className:"px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md transition-colors"},"Spanish"),react.createElement("button",{onClick:()=>setLang("fr"),className:"px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md transition-colors"},"French"),react.createElement("button",{onClick:removeLang,className:"px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-sm rounded-md transition-colors"},"Reset"))),react.createElement("div",{className:"space-y-2"},react.createElement("div",{className:"flex items-center justify-between"},react.createElement("span",{className:"text-sm font-medium text-slate-700 dark:text-slate-300"},"Session Management"),react.createElement("span",{className:"text-xs text-slate-500 dark:text-slate-400"},"ID: ",sessionId?sessionId.slice(0,8):"Not set")),react.createElement("div",{className:"flex space-x-2"},react.createElement("button",{onClick:()=>setSessionId(Math.random().toString(36).slice(2),{expires:1/24,sameSite:"strict"}),className:"px-3 py-1 bg-green-500 hover:bg-green-600 text-white text-sm rounded-md transition-colors"},"New Session"),react.createElement("button",{onClick:removeSessionId,className:"px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-sm rounded-md transition-colors"},"End Session")),react.createElement("div",{className:"text-xs text-slate-500 dark:text-slate-400"},"Note: Session cookie expires in 1 hour")),react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},"Open your browser's developer tools to see the cookies being set and removed! 🍪"))))))}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // Theme preference example\n    const [theme, setTheme, removeTheme] = useCookie("preferred-theme");\n\n    // Language preference example\n    const [lang, setLang, removeLang] = useCookie("preferred-language");\n\n    // Session example with expiry\n    const [sessionId, setSessionId, removeSessionId] = useCookie("session-id");\n\n    // Set initial values if not set\n    useEffect(() => {\n      if (!theme) setTheme("system");\n      if (!lang) setLang("en");\n      if (!sessionId) setSessionId(Math.random().toString(36).slice(2), {\n        expires: 1 / 24\n      }); // 1 hour\n    }, []);\n    return <div className="space-y-6 max-w-lg">\n        <div>\n          <h3 className="text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100">\n            Cookie Management Examples\n          </h3>\n          <div className="bg-slate-100 dark:bg-slate-800 p-4 rounded-lg">\n            <div className="space-y-6">\n              {/* Theme Preference */}\n              <div className="space-y-2">\n                <div className="flex items-center justify-between">\n                  <span className="text-sm font-medium text-slate-700 dark:text-slate-300">\n                    Theme Preference\n                  </span>\n                  <span className="text-xs text-slate-500 dark:text-slate-400">\n                    Current: {theme || "Not set"}\n                  </span>\n                </div>\n                <div className="flex space-x-2">\n                  <button onClick={() => setTheme("light")} className="px-3 py-1 bg-yellow-500 hover:bg-yellow-600 text-white text-sm rounded-md transition-colors">\n                    Light\n                  </button>\n                  <button onClick={() => setTheme("dark")} className="px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md transition-colors">\n                    Dark\n                  </button>\n                  <button onClick={() => setTheme("system")} className="px-3 py-1 bg-green-500 hover:bg-green-600 text-white text-sm rounded-md transition-colors">\n                    System\n                  </button>\n                  <button onClick={removeTheme} className="px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-sm rounded-md transition-colors">\n                    Reset\n                  </button>\n                </div>\n              </div>\n\n              {/* Language Preference */}\n              <div className="space-y-2">\n                <div className="flex items-center justify-between">\n                  <span className="text-sm font-medium text-slate-700 dark:text-slate-300">\n                    Language Preference\n                  </span>\n                  <span className="text-xs text-slate-500 dark:text-slate-400">\n                    Current: {lang || "Not set"}\n                  </span>\n                </div>\n                <div className="flex space-x-2">\n                  <button onClick={() => setLang("en")} className="px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md transition-colors">\n                    English\n                  </button>\n                  <button onClick={() => setLang("es")} className="px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md transition-colors">\n                    Spanish\n                  </button>\n                  <button onClick={() => setLang("fr")} className="px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md transition-colors">\n                    French\n                  </button>\n                  <button onClick={removeLang} className="px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-sm rounded-md transition-colors">\n                    Reset\n                  </button>\n                </div>\n              </div>\n\n              {/* Session Management */}\n              <div className="space-y-2">\n                <div className="flex items-center justify-between">\n                  <span className="text-sm font-medium text-slate-700 dark:text-slate-300">\n                    Session Management\n                  </span>\n                  <span className="text-xs text-slate-500 dark:text-slate-400">\n                    ID: {sessionId ? sessionId.slice(0, 8) : "Not set"}\n                  </span>\n                </div>\n                <div className="flex space-x-2">\n                  <button onClick={() => setSessionId(Math.random().toString(36).slice(2), {\n                  expires: 1 / 24,\n                  // 1 hour\n                  sameSite: "strict"\n                })} className="px-3 py-1 bg-green-500 hover:bg-green-600 text-white text-sm rounded-md transition-colors">\n                    New Session\n                  </button>\n                  <button onClick={removeSessionId} className="px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-sm rounded-md transition-colors">\n                    End Session\n                  </button>\n                </div>\n                <div className="text-xs text-slate-500 dark:text-slate-400">\n                  Note: Session cookie expires in 1 hour\n                </div>\n              </div>\n\n              {/* Cookie Info */}\n              <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n                <p className="text-sm text-blue-600 dark:text-blue-400">\n                  Open your browser\'s developer tools to see the cookies being\n                  set and removed! 🍪\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);