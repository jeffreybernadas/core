(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[2663],{"./node_modules/copy-to-clipboard/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var deselectCurrent=__webpack_require__("./node_modules/toggle-selection/index.js"),clipboardToIE11Formatting={"text/plain":"Text","text/html":"Url",default:"Text"};module.exports=function copy(text,options){var debug,message,reselectPrevious,range,selection,mark,success=!1;options||(options={}),debug=options.debug||!1;try{if(reselectPrevious=deselectCurrent(),range=document.createRange(),selection=document.getSelection(),(mark=document.createElement("span")).textContent=text,mark.ariaHidden="true",mark.style.all="unset",mark.style.position="fixed",mark.style.top=0,mark.style.clip="rect(0, 0, 0, 0)",mark.style.whiteSpace="pre",mark.style.webkitUserSelect="text",mark.style.MozUserSelect="text",mark.style.msUserSelect="text",mark.style.userSelect="text",mark.addEventListener("copy",(function(e){if(e.stopPropagation(),options.format)if(e.preventDefault(),void 0===e.clipboardData){debug&&console.warn("unable to use e.clipboardData"),debug&&console.warn("trying IE specific stuff"),window.clipboardData.clearData();var format=clipboardToIE11Formatting[options.format]||clipboardToIE11Formatting.default;window.clipboardData.setData(format,text)}else e.clipboardData.clearData(),e.clipboardData.setData(options.format,text);options.onCopy&&(e.preventDefault(),options.onCopy(e.clipboardData))})),document.body.appendChild(mark),range.selectNodeContents(mark),selection.addRange(range),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");success=!0}catch(err){debug&&console.error("unable to copy using execCommand: ",err),debug&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(options.format||"text",text),options.onCopy&&options.onCopy(window.clipboardData),success=!0}catch(err){debug&&console.error("unable to copy using clipboardData: ",err),debug&&console.error("falling back to prompt"),message=function format(message){var copyKey=(/mac os x/i.test(navigator.userAgent)?"âŒ˜":"Ctrl")+"+C";return message.replace(/#{\s*key\s*}/g,copyKey)}("message"in options?options.message:"Copy to clipboard: #{key}, Enter"),window.prompt(message,text)}}finally{selection&&("function"==typeof selection.removeRange?selection.removeRange(range):selection.removeAllRanges()),mark&&document.body.removeChild(mark),reselectPrevious()}return success}},"./node_modules/toggle-selection/index.js":module=>{module.exports=function(){var selection=document.getSelection();if(!selection.rangeCount)return function(){};for(var active=document.activeElement,ranges=[],i=0;i<selection.rangeCount;i++)ranges.push(selection.getRangeAt(i));switch(active.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":active.blur();break;default:active=null}return selection.removeAllRanges(),function(){"Caret"===selection.type&&selection.removeAllRanges(),selection.rangeCount||ranges.forEach((function(range){selection.addRange(range)})),active&&active.focus()}}},"./src/hooks/useMountedState.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>useMountedState});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function useMountedState(){const mountedRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1),get=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((()=>mountedRef.current),[]);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>(mountedRef.current=!0,()=>{mountedRef.current=!1})),[]),get}},"./src/hooks/useSetState.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const __WEBPACK_DEFAULT_EXPORT__=(initialState={})=>{const[state,set]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialState);return[state,(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((patch=>{set((prevState=>Object.assign({},prevState,patch instanceof Function?patch(prevState):patch)))}),[])]}},"./src/stories/hooks/useCopyToClipboard.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useCopyToClipboard_stories});var react=__webpack_require__("./node_modules/react/index.js"),copy_to_clipboard=__webpack_require__("./node_modules/copy-to-clipboard/index.js"),copy_to_clipboard_default=__webpack_require__.n(copy_to_clipboard),useMountedState=__webpack_require__("./src/hooks/useMountedState.ts"),useSetState=__webpack_require__("./src/hooks/useSetState.ts");const hooks_useCopyToClipboard=()=>{const isMounted=(0,useMountedState.A)(),[state,setState]=(0,useSetState.A)({value:void 0,error:void 0,noUserInteraction:!0});return[state,(0,react.useCallback)((value=>{if(!isMounted())return;let noUserInteraction,normalizedValue;try{if("string"!=typeof value&&"number"!=typeof value){const error=new Error(`Cannot copy typeof ${typeof value} to clipboard, must be a string`);return void setState({value,error,noUserInteraction:!0})}if(""===value){const error=new Error("Cannot copy empty string to clipboard.");return void setState({value,error,noUserInteraction:!0})}normalizedValue=value.toString(),noUserInteraction=copy_to_clipboard_default()(normalizedValue),setState({value:normalizedValue,error:void 0,noUserInteraction})}catch(error){setState({value:normalizedValue,error,noUserInteraction})}}),[])]};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useCopyToClipboard_stories={title:"Hooks/Browser API/useCopyToClipboard",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useCopyToClipboard` is a hook that provides a simple way to copy text to the clipboard.\nIt handles various edge cases and provides feedback about the copy operation\'s success or failure.\n\n### Module Federation Import\n```tsx\nimport { useCopyToClipboard } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useCopyToClipboard } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  return (\n    <div>\n      <button onClick={() => copyToClipboard("Hello, World!")}>\n        Copy Text\n      </button>\n      {state.value && <span>Copied!</span>}\n      {state.error && <span>Failed to copy</span>}\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseCopyToClipboard(): [\n  state: {\n    value?: string, // Last copied value\n    error?: Error, // Error if copy failed\n    noUserInteraction: boolean // Whether copy was programmatic\n  },\n  copyToClipboard: (text: string) => void // Function to copy text\n]\n```\n\n### Browser Compatibility\n- Uses the Clipboard API when available\n- Falls back to document.execCommand(\'copy\') in older browsers\n- Some browsers may require user interaction or HTTPS\n\n### Related Resources\n- [MDN: Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API)\n- [MDN: Document.execCommand()](https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand)'}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},Example={render:()=>{const[state,copyToClipboard]=hooks_useCopyToClipboard(),[customText,setCustomText]=(0,react.useState)("");return react.createElement("div",{className:"space-y-6 max-w-lg"},react.createElement("div",null,react.createElement("h3",{className:"text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100"},"Copy to Clipboard Examples"),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-800 p-4 rounded-lg"},react.createElement("div",{className:"space-y-6"},react.createElement("div",{className:"space-y-2"},react.createElement("h4",{className:"text-sm font-medium text-slate-700 dark:text-slate-300"},"Quick Copy"),react.createElement("div",{className:"grid grid-cols-2 gap-2"},[{label:"Greeting",text:"Hello, World!"},{label:"Quote",text:"To be or not to be, that is the question."},{label:"Code",text:'console.log("Hello, World!");'},{label:"URL",text:"https://example.com"}].map((({label,text})=>react.createElement("div",{key:label,className:"flex items-center justify-between p-2 bg-white dark:bg-slate-700 rounded border border-slate-200 dark:border-slate-600"},react.createElement("span",{className:"text-sm text-slate-600 dark:text-slate-400"},label),react.createElement("button",{onClick:()=>copyToClipboard(text),className:"px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded transition-colors"},"Copy")))))),react.createElement("div",{className:"space-y-2"},react.createElement("h4",{className:"text-sm font-medium text-slate-700 dark:text-slate-300"},"Custom Text"),react.createElement("div",{className:"flex space-x-2"},react.createElement("input",{type:"text",value:customText,onChange:e=>setCustomText(e.target.value),placeholder:"Enter text to copy...",className:"flex-1 px-3 py-2 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500"}),react.createElement("button",{onClick:()=>copyToClipboard(customText),disabled:!customText,className:"px-4 py-2 bg-green-500 hover:bg-green-600 disabled:bg-slate-300 dark:disabled:bg-slate-600 text-white rounded-md transition-colors"},"Copy"))),react.createElement("div",{className:"space-y-2"},react.createElement("h4",{className:"text-sm font-medium text-slate-700 dark:text-slate-300"},"Error Handling"),react.createElement("div",{className:"grid grid-cols-2 gap-2"},react.createElement("button",{onClick:()=>copyToClipboard(""),className:"px-3 py-2 bg-yellow-500 hover:bg-yellow-600 text-white text-sm rounded transition-colors"},"Try Empty String"),react.createElement("button",{onClick:()=>copyToClipboard(void 0),className:"px-3 py-2 bg-red-500 hover:bg-red-600 text-white text-sm rounded transition-colors"},"Try Invalid Input"))),(state.value||state.error)&&react.createElement("div",{className:"p-3 rounded "+(state.error?"bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400":"bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400")},state.error?react.createElement("div",{className:"flex items-center"},react.createElement("svg",{className:"w-4 h-4 mr-2",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"},react.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"})),state.error.message):react.createElement("div",{className:"flex items-center"},react.createElement("svg",{className:"w-4 h-4 mr-2",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"},react.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M5 13l4 4L19 7"})),"Copied: ",state.value)),react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},"Try copying different types of content and check your clipboard! ðŸ“‹"))))))}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [state, copyToClipboard] = useCopyToClipboard();\n    const [customText, setCustomText] = useState("");\n\n    // Sample text snippets\n    const snippets = [{\n      label: "Greeting",\n      text: "Hello, World!"\n    }, {\n      label: "Quote",\n      text: "To be or not to be, that is the question."\n    }, {\n      label: "Code",\n      text: \'console.log("Hello, World!");\'\n    }, {\n      label: "URL",\n      text: "https://example.com"\n    }];\n    return <div className="space-y-6 max-w-lg">\n        <div>\n          <h3 className="text-lg font-semibold mb-2 text-slate-900 dark:text-slate-100">\n            Copy to Clipboard Examples\n          </h3>\n          <div className="bg-slate-100 dark:bg-slate-800 p-4 rounded-lg">\n            <div className="space-y-6">\n              {/* Quick Copy Examples */}\n              <div className="space-y-2">\n                <h4 className="text-sm font-medium text-slate-700 dark:text-slate-300">\n                  Quick Copy\n                </h4>\n                <div className="grid grid-cols-2 gap-2">\n                  {snippets.map(({\n                  label,\n                  text\n                }) => <div key={label} className="flex items-center justify-between p-2 bg-white dark:bg-slate-700 rounded border border-slate-200 dark:border-slate-600">\n                      <span className="text-sm text-slate-600 dark:text-slate-400">\n                        {label}\n                      </span>\n                      <button onClick={() => copyToClipboard(text)} className="px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded transition-colors">\n                        Copy\n                      </button>\n                    </div>)}\n                </div>\n              </div>\n\n              {/* Custom Text Input */}\n              <div className="space-y-2">\n                <h4 className="text-sm font-medium text-slate-700 dark:text-slate-300">\n                  Custom Text\n                </h4>\n                <div className="flex space-x-2">\n                  <input type="text" value={customText} onChange={e => setCustomText(e.target.value)} placeholder="Enter text to copy..." className="flex-1 px-3 py-2 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500" />\n                  <button onClick={() => copyToClipboard(customText)} disabled={!customText} className="px-4 py-2 bg-green-500 hover:bg-green-600 disabled:bg-slate-300 dark:disabled:bg-slate-600 text-white rounded-md transition-colors">\n                    Copy\n                  </button>\n                </div>\n              </div>\n\n              {/* Error Examples */}\n              <div className="space-y-2">\n                <h4 className="text-sm font-medium text-slate-700 dark:text-slate-300">\n                  Error Handling\n                </h4>\n                <div className="grid grid-cols-2 gap-2">\n                  <button onClick={() => copyToClipboard("")} className="px-3 py-2 bg-yellow-500 hover:bg-yellow-600 text-white text-sm rounded transition-colors">\n                    Try Empty String\n                  </button>\n                  <button onClick={() => copyToClipboard(undefined as unknown as string)} className="px-3 py-2 bg-red-500 hover:bg-red-600 text-white text-sm rounded transition-colors">\n                    Try Invalid Input\n                  </button>\n                </div>\n              </div>\n\n              {/* Status Display */}\n              {(state.value || state.error) && <div className={`p-3 rounded ${state.error ? "bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400" : "bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400"}`}>\n                  {state.error ? <div className="flex items-center">\n                      <svg className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />\n                      </svg>\n                      {state.error.message}\n                    </div> : <div className="flex items-center">\n                      <svg className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />\n                      </svg>\n                      Copied: {state.value}\n                    </div>}\n                </div>}\n\n              {/* Instructions */}\n              <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n                <p className="text-sm text-blue-600 dark:text-blue-400">\n                  Try copying different types of content and check your\n                  clipboard! ðŸ“‹\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);