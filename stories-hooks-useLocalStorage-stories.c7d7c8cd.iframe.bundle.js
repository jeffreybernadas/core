"use strict";(self.webpackChunk_bernz322_core=self.webpackChunk_bernz322_core||[]).push([[2199],{"./src/hooks/misc/util.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{AU:()=>off,Bd:()=>isBrowser,lQ:()=>noop,on:()=>on,w2:()=>isNavigator});const noop=()=>{};function on(obj,...args){obj&&obj.addEventListener&&obj.addEventListener(...args)}function off(obj,...args){obj&&obj.removeEventListener&&obj.removeEventListener(...args)}const isBrowser="undefined"!=typeof window,isNavigator="undefined"!=typeof navigator},"./src/stories/hooks/useLocalStorage.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useLocalStorage_stories});var react=__webpack_require__("./node_modules/react/index.js"),util=__webpack_require__("./src/hooks/misc/util.ts");const hooks_useLocalStorage=(key,initialValue,options)=>{if(!util.Bd)return[initialValue,util.lQ,util.lQ];if(!key)throw new Error("useLocalStorage key may not be falsy");const deserializer=options?options.raw?value=>value:options.deserializer:JSON.parse,initializer=(0,react.useRef)((key=>{try{const serializer=options?options.raw?String:options.serializer:JSON.stringify,localStorageValue=localStorage.getItem(key);return null!==localStorageValue?deserializer(localStorageValue):(initialValue&&localStorage.setItem(key,serializer(initialValue)),initialValue)}catch{return initialValue}})),[state,setState]=(0,react.useState)((()=>initializer.current(key)));(0,react.useLayoutEffect)((()=>setState(initializer.current(key))),[key]);const set=(0,react.useCallback)((valOrFunc=>{try{const newState="function"==typeof valOrFunc?valOrFunc(state):valOrFunc;if(void 0===newState)return;let value;value=options?options.raw?"string"==typeof newState?newState:JSON.stringify(newState):options.serializer?options.serializer(newState):JSON.stringify(newState):JSON.stringify(newState),localStorage.setItem(key,value),setState(deserializer(value))}catch{}}),[key,setState]),remove=(0,react.useCallback)((()=>{try{localStorage.removeItem(key),setState(void 0)}catch{}}),[key,setState]);return[state,set,remove]};var ThemeProvider=__webpack_require__("./src/themes/shadcn/ThemeProvider.tsx");const useLocalStorage_stories={title:"Hooks/Browser API/useLocalStorage",parameters:{layout:"centered",docs:{canvas:{sourceState:"none"},description:{component:'`useLocalStorage` is a hook that provides a way to persist state in the browser\'s localStorage.\nIt handles serialization/deserialization of values and provides a clean API similar to useState.\n\n### Module Federation Import\n```tsx\nimport { useLocalStorage } from "@core/hooks";\n```\n\n### NPM Package Import\n```tsx\nimport { useLocalStorage } from "@bernz322/core/hooks";\n```\n\n### Basic Usage\n```tsx\nconst Component = () => {\n  const [value, setValue, remove] = useLocalStorage("my-key", "initial value");\n\n  return (\n    <div>\n      <p>Value: {value}</p>\n      <button onClick={() => setValue("new value")}>Update</button>\n      <button onClick={remove}>Remove</button>\n    </div>\n  );\n};\n```\n\n### Parameters\n```tsx\nuseLocalStorage<T>(\n  key: string,\n  initialValue?: T,\n  options?: {\n    raw: true;\n  } | {\n    raw: false;\n    serializer: (value: T) => string;\n    deserializer: (value: string) => T;\n  }\n): [T | undefined, Dispatch<SetStateAction<T | undefined>>, () => void]\n```\n\n### Returns\n```tsx\n[\n  state: T | undefined,           // Current value\n  setState: (value: T) => void,   // Function to update value\n  remove: () => void             // Function to remove value from localStorage\n]\n```\n\n### Features\n- Type-safe: Fully typed with TypeScript\n- SSR compatible: Safe to use during server-side rendering\n- Custom serialization: Support for custom serializer/deserializer\n- Raw mode: Option to store values without JSON serialization\n- Error handling: Gracefully handles storage errors (e.g. private browsing)\n\n### Browser Compatibility\nUses the Web Storage API (localStorage).\nSupported in all modern browsers.\nFalls back gracefully when storage is not available.\n\n### Related Resources\n- [MDN: Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API)\n- [MDN: localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)'}}},tags:["autodocs"],decorators:[Story=>react.createElement(ThemeProvider.N,null,react.createElement(Story,null))]},Example={render:()=>{const[text,setText,removeText]=hooks_useLocalStorage("demo-text","Hello World"),[user,setUser,removeUser]=hooks_useLocalStorage("demo-user",{name:"John Doe",age:30,preferences:{theme:"light",notifications:!0}}),[rawValue,setRawValue,removeRaw]=hooks_useLocalStorage("demo-raw","raw-value",{raw:!0}),[date,setDate,removeDate]=hooks_useLocalStorage("demo-date",new Date,{raw:!1,serializer:v=>v.toISOString(),deserializer:v=>new Date(v)}),[name,setName]=(0,react.useState)(user?.name||""),[age,setAge]=(0,react.useState)(user?.age.toString()||"");return react.createElement("div",{className:"w-[600px]"},react.createElement("div",{className:"bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-8"},react.createElement("div",{className:"space-y-4"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Simple String Storage"),react.createElement("div",{className:"space-y-2"},react.createElement("input",{type:"text",value:text||"",onChange:e=>setText(e.target.value),className:"w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700",placeholder:"Enter text..."}),react.createElement("div",{className:"flex space-x-2"},react.createElement("button",{onClick:()=>setText("Reset Value"),className:"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"},"Reset"),react.createElement("button",{onClick:removeText,className:"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm"},"Remove")))),react.createElement("div",{className:"space-y-4"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Complex Object Storage"),react.createElement("div",{className:"space-y-4"},react.createElement("div",{className:"space-y-2"},react.createElement("input",{type:"text",value:name,onChange:e=>setName(e.target.value),className:"w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700",placeholder:"Name"}),react.createElement("input",{type:"number",value:age,onChange:e=>setAge(e.target.value),className:"w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700",placeholder:"Age"})),react.createElement("div",{className:"flex space-x-2"},react.createElement("button",{onClick:()=>setUser((prev=>({...prev,name,age:parseInt(age)}))),className:"px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm"},"Update User"),react.createElement("button",{onClick:()=>setUser((prev=>({...prev,preferences:{...prev.preferences,theme:"light"===prev.preferences.theme?"dark":"light"}}))),className:"px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 text-sm"},"Toggle Theme"),react.createElement("button",{onClick:removeUser,className:"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm"},"Remove User")),react.createElement("div",{className:"bg-slate-100 dark:bg-slate-700 p-3 rounded"},react.createElement("pre",{className:"text-sm text-slate-700 dark:text-slate-300"},JSON.stringify(user,null,2))))),react.createElement("div",{className:"space-y-4"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Raw Storage"),react.createElement("div",{className:"space-y-2"},react.createElement("input",{type:"text",value:rawValue||"",onChange:e=>setRawValue(e.target.value),className:"w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700",placeholder:"Raw value..."}),react.createElement("button",{onClick:removeRaw,className:"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm"},"Remove Raw"))),react.createElement("div",{className:"space-y-4"},react.createElement("h3",{className:"text-lg font-semibold text-slate-900 dark:text-slate-100"},"Custom Serialization (Date)"),react.createElement("div",{className:"space-y-2"},react.createElement("div",{className:"bg-slate-100 dark:bg-slate-700 p-3 rounded"},react.createElement("p",{className:"text-sm text-slate-700 dark:text-slate-300"},"Stored Date: ",date?.toLocaleString())),react.createElement("div",{className:"flex space-x-2"},react.createElement("button",{onClick:()=>setDate(new Date),className:"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"},"Update to Now"),react.createElement("button",{onClick:removeDate,className:"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm"},"Remove Date")))),react.createElement("div",{className:"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded"},react.createElement("p",{className:"text-sm text-blue-600 dark:text-blue-400"},'Try the different storage examples above! The values persist even after page refresh. Open your browser\'s DevTools and check the "Application" tab ',"->",' "Local Storage" to see the stored values. 🗄️'))))}},__namedExportsOrder=["Example"];Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // Simple string example\n    const [text, setText, removeText] = useLocalStorage<string>("demo-text", "Hello World");\n\n    // Complex object example\n    const [user, setUser, removeUser] = useLocalStorage<{\n      name: string;\n      age: number;\n      preferences: {\n        theme: string;\n        notifications: boolean;\n      };\n    }>("demo-user", {\n      name: "John Doe",\n      age: 30,\n      preferences: {\n        theme: "light",\n        notifications: true\n      }\n    });\n\n    // Raw storage example\n    const [rawValue, setRawValue, removeRaw] = useLocalStorage<string>("demo-raw", "raw-value", {\n      raw: true\n    });\n\n    // Custom serialization example\n    const [date, setDate, removeDate] = useLocalStorage<Date>("demo-date", new Date(), {\n      raw: false,\n      serializer: (v: Date) => v.toISOString(),\n      deserializer: (v: string) => new Date(v)\n    });\n\n    // Local state for form\n    const [name, setName] = useState(user?.name || "");\n    const [age, setAge] = useState(user?.age.toString() || "");\n    return <div className="w-[600px]">\n        <div className="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg space-y-8">\n          {/* Simple String Storage */}\n          <div className="space-y-4">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Simple String Storage\n            </h3>\n            <div className="space-y-2">\n              <input type="text" value={text || ""} onChange={e => setText(e.target.value)} className="w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700" placeholder="Enter text..." />\n              <div className="flex space-x-2">\n                <button onClick={() => setText("Reset Value")} className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm">\n                  Reset\n                </button>\n                <button onClick={removeText} className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm">\n                  Remove\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Complex Object Storage */}\n          <div className="space-y-4">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Complex Object Storage\n            </h3>\n            <div className="space-y-4">\n              <div className="space-y-2">\n                <input type="text" value={name} onChange={e => setName(e.target.value)} className="w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700" placeholder="Name" />\n                <input type="number" value={age} onChange={e => setAge(e.target.value)} className="w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700" placeholder="Age" />\n              </div>\n              <div className="flex space-x-2">\n                <button onClick={() => setUser(prev => ({\n                ...prev!,\n                name,\n                age: parseInt(age)\n              }))} className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm">\n                  Update User\n                </button>\n                <button onClick={() => setUser(prev => ({\n                ...prev!,\n                preferences: {\n                  ...prev!.preferences,\n                  theme: prev!.preferences.theme === "light" ? "dark" : "light"\n                }\n              }))} className="px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 text-sm">\n                  Toggle Theme\n                </button>\n                <button onClick={removeUser} className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm">\n                  Remove User\n                </button>\n              </div>\n              <div className="bg-slate-100 dark:bg-slate-700 p-3 rounded">\n                <pre className="text-sm text-slate-700 dark:text-slate-300">\n                  {JSON.stringify(user, null, 2)}\n                </pre>\n              </div>\n            </div>\n          </div>\n\n          {/* Raw Storage */}\n          <div className="space-y-4">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Raw Storage\n            </h3>\n            <div className="space-y-2">\n              <input type="text" value={rawValue || ""} onChange={e => setRawValue(e.target.value)} className="w-full px-3 py-2 border rounded text-slate-900 dark:text-slate-100 dark:bg-slate-700" placeholder="Raw value..." />\n              <button onClick={removeRaw} className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm">\n                Remove Raw\n              </button>\n            </div>\n          </div>\n\n          {/* Custom Serialization */}\n          <div className="space-y-4">\n            <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">\n              Custom Serialization (Date)\n            </h3>\n            <div className="space-y-2">\n              <div className="bg-slate-100 dark:bg-slate-700 p-3 rounded">\n                <p className="text-sm text-slate-700 dark:text-slate-300">\n                  Stored Date: {date?.toLocaleString()}\n                </p>\n              </div>\n              <div className="flex space-x-2">\n                <button onClick={() => setDate(new Date())} className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm">\n                  Update to Now\n                </button>\n                <button onClick={removeDate} className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm">\n                  Remove Date\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Instructions */}\n          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded">\n            <p className="text-sm text-blue-600 dark:text-blue-400">\n              Try the different storage examples above! The values persist even\n              after page refresh. Open your browser&apos;s DevTools and check\n              the &quot;Application&quot; tab {"->"} &quot;Local Storage&quot;\n              to see the stored values. 🗄️\n            </p>\n          </div>\n        </div>\n      </div>;\n  }\n}',...Example.parameters?.docs?.source}}}},"./src/themes/shadcn/ThemeProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>ThemeProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const initialState={theme:"system",setTheme:()=>null},ThemeProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(initialState);function ThemeProvider({children,defaultTheme="system",storageKey="shadcn-core-theme",...props}){const[theme,setTheme]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>localStorage.getItem(storageKey)||defaultTheme));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const root=window.document.documentElement;if(root.classList.remove("light","dark"),"system"!==theme)root.classList.add(theme);else{const systemTheme=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";root.classList.add(systemTheme)}}),[theme]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({theme,setTheme:theme=>{localStorage.setItem(storageKey,theme),setTheme(theme)}})),[theme,storageKey,setTheme]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ThemeProviderContext.Provider,{...props,value},children)}ThemeProvider.__docgenInfo={description:'ShadCn Theme Provider Component\n\nProvides theme context and functionality for light/dark mode in ShadCn components.\nAutomatically handles system theme preference and persists user choice.\n\n@param {Object} props - Component props\n@param {React.ReactNode} props.children - Child components to be wrapped\n@param {Theme} [props.defaultTheme="system"] - Default theme ("light", "dark", or "system")\n@param {string} [props.storageKey="core-ui-theme"] - LocalStorage key for theme persistence',methods:[],displayName:"ThemeProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},defaultTheme:{required:!1,tsType:{name:"union",raw:'"dark" | "light" | "system"',elements:[{name:"literal",value:'"dark"'},{name:"literal",value:'"light"'},{name:"literal",value:'"system"'}]},description:"",defaultValue:{value:'"system"',computed:!1}},storageKey:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"shadcn-core-theme"',computed:!1}}}}}}]);